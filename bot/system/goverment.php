<?php

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Data

class SocOrderClass{ // –ö–ª–∞—Å—Å –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ—ë–≤
	const TYPES = array('–ö–∞–ø–∏—Ç–∞–ª–∏–∑–º', '–°–æ—Ü–∏–∞–ª–∏–∑–º', '–ö–æ–º–º—É–Ω–∏–∑–º', '–§–∞—à–∏–∑–º');
	const ORDERS_DESC = array(
		"—ç—Ç–æ –∫–∞–ø–∏—Ç–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–µ–¥–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ —Å —Ä–µ—Å–ø—É–±–ª–∏–∫–∞–Ω—Å–∫–æ–π —Ñ–æ—Ä–º–æ–π –ø—Ä–∞–≤–ª–µ–Ω–∏—è",
		"—ç—Ç–æ —Å–æ—Ü–∏–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —É–Ω–∏—Ç–∞—Ä–Ω–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞ —Å –¥–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–∏–∫—Ç–∞—Ç—É—Ä–æ–π –Ω–∞—Ä–æ–¥–∞",
		"—ç—Ç–æ –∫–æ–º–º—É–Ω–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —É–Ω–∏—Ç–∞—Ä–Ω–æ–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ —Å —Ç–æ—Ç–∞–ª–∏—Ç–∞—Ä–Ω—ã–º –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ–∂–∏–º–æ–º",
		"—ç—Ç–æ —Ñ–∞—à–∏—Å—Ç–∫–∞—è —É–Ω–∏—Ç–∞—Ä–Ω–∞—è –∏–º–ø–µ—Ä–∏—è —Å –¥–∏–∫—Ç–∞—Ç–æ—Ä—Å–∫–æ–π —Ñ–æ—Ä–º–æ–π –ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ç–æ—Ç–∞–ª–∏—Ç–∞—Ä–Ω—ã–º –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ–∂–∏–º–æ–º"
	);

	public static function socOrderEncode($id){
		mb_internal_encoding("UTF-8");
		$array = self::TYPES;
		for($i = 0; $i < count($array); $i++){
			if(mb_strtoupper($array[$i]) == mb_strtoupper($id)){
				return $i+1;
			}
		}
		return 0;
	}

	public static function socOrderDecode($id){
		$array = self::TYPES;
		return $array[$id-1];
	}

	public static function getSocOrderDesc($id){
		return self::ORDERS_DESC[$id-1];
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Handlers

function goverment_constitution($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$words = $finput->words;
	$db = &$finput->db;

	$botModule = new BotModule($db);
	$gov = &$db["goverment"];

	$current_soc_order_desc = SocOrderClass::getSocOrderDesc($gov["soc_order"]);
	$msg = "%__appeal__%, üì∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ:\nüèõ%__confa_name__% - {$current_soc_order_desc}.\n&#128104;&#8205;&#9878;–ì–ª–∞–≤–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞: %__president_name__%.\nüìñ–ü—Ä–∞–≤—è—â–∞—è –ø–∞—Ä—Ç–∏—è: {$gov["batch_name"]}.\nüè¢–°—Ç–æ–ª–∏—Ü–∞: {$gov["capital"]}.\n";

	$request = json_encode(array('peer_id' => $data->object->peer_id, 'message' => $msg), JSON_UNESCAPED_UNICODE);
	$request = vk_parse_vars($request, array("__president_name__", "__confa_name__", "__appeal__"));

	vk_execute($botModule->makeExeAppeal($data->object->from_id)."
		var confa_info = API.messages.getConversationsById({'peer_ids':[{$data->object->peer_id}]}).items[0];
		var president_info = API.users.get({'user_ids':[{$gov["president_id"]}],'fields':'screen_name'})[0];

		var __president_name__ = '@'+president_info.screen_name+' ('+president_info.first_name+' '+president_info.last_name+')';
		var __confa_name__ = confa_info.chat_settings.title;
		var __appeal__ = appeal; appeal = null;

		return API.messages.send({$request});
		");
}

function goverment_show_laws($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$words = $finput->words;
	$db = &$finput->db;

	$botModule = new BotModule($db);

	$laws = $db["goverment"]["laws"];
	if(array_key_exists(1, $words))
		$number = intval($words[1]);
	else
		$number = 1;

	if(count($laws) == 0){
		$botModule->sendSimpleMessage($data->object->peer_id, ", ‚ùó–ü–æ–∫–∞ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–æ–Ω–æ–≤!", $data->object->from_id);
		return;
	}

	$laws_content = array();
	for($i = 0; $i < count($laws); $i++){
		$laws_content[] = $laws[$i]["content"];
	}

	/////////////////////////////////////////////////////
	////////////////////////////////////////////////////
	$list_in = &$laws_content; // –í—Ö–æ–¥–Ω–æ–π —Å–ø–∏—Å–æ–∫
	$list_out = array(); // –í—ã—Ö–æ–¥–Ω–æ–π —Å–ø–∏—Å–æ–∫

	$list_number = $number; // –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
	$list_size = 10; // –†–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞
	////////////////////////////////////////////////////
	if(count($list_in) % $list_size == 0)
		$list_max_number = intdiv(count($list_in), $list_size);
	else
		$list_max_number = intdiv(count($list_in), $list_size)+1;
	$list_min_index = ($list_size*$list_number)-$list_size;
	if($list_size*$list_number >= count($list_in))	
		$list_max_index = count($list_in)-1;
	else
		$list_max_index = $list_size*$list_number-1;
	if($list_number <= $list_max_number && $list_number > 0){
		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞
		for($i = $list_min_index; $i <= $list_max_index; $i++){
			$list_out[] = $list_in[$i];
		}
	}
	else{
		// –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
		$botModule->sendSimpleMessage($data->object->peer_id, ", ‚õî—É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ø–∏—Å–∫–∞!", $data->object->from_id);
		return;
	}
	////////////////////////////////////////////////////
	////////////////////////////////////////////////////

	$laws_content = $list_out;

	$msg = ", üìå–∑–∞–∫–æ–Ω—ã [{$list_number}/{$list_max_number}]:";
	for($i = 0; $i < count($laws_content); $i++){
		$law_id = ($i+1)+10*($list_number-1);
		$msg = $msg . "\n{$law_id}. {$laws_content[$i]}";
	}

	$botModule->sendSimpleMessage($data->object->peer_id, $msg, $data->object->from_id);
}

function goverment_laws_cpanel($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$words = $finput->words;
	$db = &$finput->db;

	$botModule = new BotModule($db);
	$gov = &$db["goverment"];

	mb_internal_encoding("UTF-8");
	if(array_key_exists(1, $words))
		$command = mb_strtolower($words[1]);
	else
		$command = "";

	if($command == "–¥–æ–±–∞–≤–∏—Ç—å"){
		if($data->object->from_id == $gov["president_id"] || $data->object->from_id == $gov["parliament_id"]){
			$time = $data->object->date;
			$content = mb_substr($data->object->text, 16);
			$publisher_type = 1;
			if($data->object->from_id == $gov["parliament_id"])
				$publisher_type = 2;
			$publisher_id = $data->object->from_id;

			$gov["laws"][] = array(
				'time' => $time,
				'publisher_type' => $publisher_type,
				'publisher_id' => $publisher_id,
				'content' => $content
			);

			$botModule->sendSimpleMessage($data->object->peer_id, "@id{$data->object->from_id} (–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ) –æ–±–Ω–æ–≤–∏–ª–æ –∑–∞–∫–æ–Ω—ã.");
		}
		else{
			$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", $data->object->from_id);
		}
	}
	elseif($command == "–æ—Ç–º–µ–Ω–∏—Ç—å"){
		if($data->object->from_id == $gov["president_id"] || $data->object->from_id == $gov["parliament_id"]){
			if(array_key_exists(2, $words))
				$law_id = intval($words[2]);
			else
				$law_id = 0;
			if($law_id == 0){
				$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–£–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–æ–Ω–∞!", $data->object->from_id);
				return;
			}

			if(!is_null($gov["laws"][$law_id-1])){
				$law = $gov["laws"][$law_id-1];

				if($law["publisher_type"] == 1){
					if($gov["president_id"] == $data->object->from_id){
						//$gov["laws"][$law_id-1] = $gov["laws"][count($gov["laws"])-1];
						unset($gov["laws"][$law_id-1]);
						$laws_tmp = array_values($gov["laws"]);
						$laws = array();
						for($i = 0; $i < count($laws_tmp); $i++){
							$laws[] = $laws_tmp[$i];
						}
						$gov["laws"] = $laws;
						$botModule->sendSimpleMessage($data->object->peer_id, ", ‚úÖ–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–æ–Ω ‚Ññ{$law_id}.", $data->object->from_id);
					}
					else{
						$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–æ–Ω –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞!", $data->object->from_id);
					}
				}
				else{
					if($gov["parliament_id"] == $data->object->from_id){
						//$gov["laws"][$law_id-1] = $gov["laws"][count($gov["laws"])-1];
						unset($gov["laws"][$law_id-1]);
						$laws_tmp = array_values($gov["laws"]);
						$laws = array();
						for($i = 0; $i < count($laws_tmp); $i++){
							$laws[] = $laws_tmp[$i];
						}
						$gov["laws"] = $laws;
						$botModule->sendSimpleMessage($data->object->peer_id, ", ‚úÖ–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–æ–Ω ‚Ññ{$law_id}.", $data->object->from_id);
					}
					else{
						$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–æ–Ω –ø–∞—Ä–ª–∞–º–µ–Ω—Ç–∞!", $data->object->from_id);
					}
				}
			}
			else{
				$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–ó–∞–∫–æ–Ω–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", $data->object->from_id);
			}
		}
		else{
			$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", $data->object->from_id);
		}
	}
	elseif($command == "–∏–Ω—Ñ–∞"){
		if(array_key_exists(2, $words))
			$law_id = intval($words[2]);
		else
			$law_id = 0;
		if($law_id == 0){
			$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–£–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–æ–Ω–∞!", $data->object->from_id);
			return;
		}

		if(!is_null($gov["laws"][$law_id-1])){
			$law = $gov["laws"][$law_id-1];

			$publisher_type_str = "–ü–∞—Ä–ª–∞–º–µ–Ω—Ç";

			if($law["publisher_type"] == 1){
				if($law["publisher_id"] == $gov["president_id"])
					$publisher_type_str = "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç";
				else
					$publisher_type_str = "–≠–∫c-–øpe–∑–∏–¥e–Ω—Ç";
			}

			$date = gmdate("d.m.Y H:i:s (–ø–æ –ú–°–ö)", $law["time"]+10800);

			$msg = "%__appeal__%, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–æ–Ω–µ:\n‚úÖ–£–∫–∞–∑–∞–Ω: %__publisher_name__% ({$publisher_type_str})\n‚úÖ–î–∞—Ç–∞ —É–∫–∞–∑–∞: {$date}\n‚úÖ–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–∫–æ–Ω–∞: {$law["content"]}";

			$request = json_encode(array('peer_id' => $data->object->peer_id, 'message' => $msg), JSON_UNESCAPED_UNICODE);
			$request = vk_parse_vars($request, array("__publisher_name__", "__appeal__"));

			vk_execute($botModule->makeExeAppeal($data->object->from_id)."
				var publisher = API.users.get({'user_ids':[{$law['publisher_id']}],'fields':'screen_name,first_name_ins,last_name_ins'})[0];

				var __publisher_name__ = '@'+publisher.screen_name+' ('+publisher.first_name_ins+' '+publisher.last_name_ins+')';
				var __appeal__ = appeal; appeal = null;

				return API.messages.send({$request});
				");
		}
		else{
			$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–ó–∞–∫–æ–Ω–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", $data->object->from_id);
		}
	}
	elseif($command == "–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å"){
		if($data->object->from_id != $gov["president_id"] && $data->object->from_id != $gov["parliament_id"]){
			$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", $data->object->from_id);
			return;
		}
		if(array_key_exists(2, $words))
			$from = intval($words[2]);
		else
			$from = 0;

		if(array_key_exists(3, $words))
			$to = intval($words[3]);
		else
			$to = 0;

		if($from == $to){
			$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–æ–Ω –≤ –æ–¥–Ω–æ –∏ —Ç–æ–∂–µ –º–µ—Å—Ç–æ.", $data->object->from_id);
			return;
		}

		if(is_null($gov["laws"][$from-1])){
			$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–ó–∞–∫–æ–Ω–∞ ‚Ññ{$from} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", $data->object->from_id);
			return;
		}
		if(is_null($gov["laws"][$to-1])){
			$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–ó–∞–∫–æ–Ω–∞ ‚Ññ{$to} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", $data->object->from_id);
			return;
		}

		$tmp = $gov["laws"][$to-1];
		$gov["laws"][$to-1] = $gov["laws"][$from-1];
		$gov["laws"][$from-1] = $tmp;
		$botModule->sendSimpleMessage($data->object->peer_id, ", ‚úÖ–ó–∞–∫–æ–Ω ‚Ññ{$from} –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ –º–µ—Å—Ç–æ –∑–∞–∫–æ–Ω–∞ ‚Ññ{$to}.", $data->object->from_id);

	}
	else{
		$commands = array(
			'!–∑–∞–∫–æ–Ω –¥–æ–±–∞–≤–∏—Ç—å <—Ç–µ–∫—Å—Ç> - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–∞',
			'!–∑–∞–∫–æ–Ω –æ—Ç–º–µ–Ω–∏—Ç—å <id> - –û—Ç–º–µ–Ω–∞ –∑–∞–∫–æ–Ω–∞',
			'!–∑–∞–∫–æ–Ω –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å <from> <to> - –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ from –≤ –ø–æ–∑–∏—Ü–∏—é to',
			'!–∑–∞–∫–æ–Ω –∏–Ω—Ñ–∞ <id> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–æ–Ω–µ'

		);
		$botModule->sendCommandListFromArray($data, ", &#9940;–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:", $commands);
	}
}

function goverment_president($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$words = $finput->words;
	$db = &$finput->db;

	$botModule = new BotModule($db);
	$gov = &$db["goverment"];
	if(!array_key_exists(1, $words)){
		$msg = "%appeal%, &#128104;&#8205;&#9878;–î–µ–π—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç: %president_name%.";
		$request = json_encode(array('peer_id' => $data->object->peer_id, 'message' => $msg), JSON_UNESCAPED_UNICODE);
		$request = vk_parse_vars($request, array("appeal", "president_name"));
		vk_execute($botModule->makeExeAppeal($data->object->from_id)."
			var president = API.users.get({'user_ids':[{$gov["president_id"]}]})[0];
			var president_name = '@id{$gov["president_id"]} ('+president.first_name+' '+president.last_name+')';
			return API.messages.send({$request});
			");
	} else {
		if($data->object->from_id == $gov["parliament_id"]){
			$new_president_id = bot_get_id_from_mention($words[1]);
			if(!is_null($new_president_id)){
				$batch_name = json_decode(vk_execute($botModule->makeExeAppeal($data->object->from_id)."
				var president = API.users.get({'user_ids':[{$new_president_id}],'fields':'first_name_gen,last_name_gen'})[0];
				var msg = '@id{$gov["parliament_id"]} (–ü–∞—Ä–ª–∞–º–µ–Ω—Ç–æ–º) –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç: @id'+president.id+' ('+president.first_name+' '+president.last_name+').';
				API.messages.send({'peer_id':{$data->object->peer_id},'message':msg});
				return '–ü–æ–ª–∏—Ç. –ø–∞—Ä—Ç–∏—è '+president.first_name_gen+' '+president.last_name_gen;
				"))->response;
				$ranksys = new RankSystem($db);
				$ranksys->setUserRank($gov["president_id"], -1);
				$ranksys->setUserRank($new_president_id, 1);
				$economy = new Economy\Main($db); // –ú–æ–¥—É–ª—å –≠–∫–æ–Ω–æ–º–∏–∫–∏
				$economy->getUser($gov["president_id"])->deleteItem("govdoc", "presidential_certificate");  // –£–±–∏—Ä–∞–µ–º —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
				$economy->getUser($new_president_id)->changeItem("govdoc", "presidential_certificate", 1);  // –í—ã–¥–∞–µ–º —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –Ω–æ–≤–æ–º—É
				$gov["president_id"] = $new_president_id;
				$gov["batch_name"] = $batch_name;
			}
			else{
				$botModule->sendSimpleMessage($data->object->peer_id, ", ‚õî–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", $data->object->from_id);
			}
		} else {
			$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏!", $data->object->from_id);
		}
	}
}

function goverment_batch($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$words = $finput->words;
	$db = &$finput->db;

	$botModule = new BotModule($db);
	$gov = &$db["goverment"];
	if(!array_key_exists(1, $words)){
		$botModule->sendSimpleMessage($data->object->peer_id, ", &#128214;–î–µ–π—Å—Ç–≤—É—é—â–∞—è –ø–∞—Ä—Ç–∏—è: ".$gov["batch_name"].".", $data->object->from_id);
	} else {
		if($data->object->from_id == $gov["president_id"]){
			mb_internal_encoding("UTF-8");
			$gov["batch_name"] = mb_substr($data->object->text, 8, mb_strlen($data->object->text));
			$msg = "@id".$gov["president_id"]." (–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç) –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–µ–π—Å—Ç–≤—É—é—â—É—é –ø–∞—Ä—Ç–∏—é.";
			$botModule->sendSimpleMessage($data->object->peer_id, $msg);
		} else {
			$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏!", $data->object->from_id);
		}
	}
}

function goverment_capital($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$words = $finput->words;
	$db = &$finput->db;

	$botModule = new BotModule($db);
	$gov = &$db["goverment"];
	if(!array_key_exists(1, $words)){
		$botModule->sendSimpleMessage($data->object->peer_id, ", &#127970;–¢–µ–∫—É—â–∞—è —Å—Ç–æ–ª–∏—Ü–∞: ".$gov["capital"].".", $data->object->from_id);
	} else {
		if($data->object->from_id == $gov["president_id"]){
			mb_internal_encoding("UTF-8");
			$gov["capital"] = mb_substr($data->object->text, 9, mb_strlen($data->object->text));
			$msg = "@id".$gov["president_id"]." (–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç) –∏–∑–º–µ–Ω–∏–ª —Å—Ç–æ–ª–∏—Ü—É –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞.";
			$botModule->sendSimpleMessage($data->object->peer_id, $msg);
		} elseif($data->object->from_id == $gov["parliament_id"]){
			mb_internal_encoding("UTF-8");
			$gov["capital"] = mb_substr($data->object->text, 9, mb_strlen($data->object->text));
			$msg = "@id".$gov["parliament_id"]." (–ü–∞—Ä–ª–∞–º–µ–Ω—Ç) –∏–∑–º–µ–Ω–∏–ª —Å—Ç–æ–ª–∏—Ü—É –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞.";
			$botModule->sendSimpleMessage($data->object->peer_id, $msg);
		} else {
			$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏!", $data->object->from_id);
		}
	}
}

function goverment_socorder($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$words = $finput->words;
	$db = &$finput->db;

	$botModule = new BotModule($db);
	$gov = &$db["goverment"];
	if(!array_key_exists(1, $words)){
		$botModule->sendSimpleMessage($data->object->peer_id, ", ‚öî–¢–µ–∫—É—â–∏–π –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–æ–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞: ".SocOrderClass::socOrderDecode($gov["soc_order"]).".", $data->object->from_id);
	} else {
		if($data->object->from_id == $gov["parliament_id"]){
			$id = SocOrderClass::socOrderEncode($words[1]);
			if ($id != 0){
				$gov["soc_order"] = $id;
				$msg = "@id".$gov["parliament_id"]." (–ü–∞—Ä–ª–∞–º–µ–Ω—Ç–æ–º) –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–æ–π.";
				$botModule->sendSimpleMessage($data->object->peer_id, $msg);
			} else {
				$botModule->sendSimpleMessage($data->object->peer_id, ", –¢–∞–∫–æ–≥–æ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç—Ä–æ—è –Ω–µ—Ç! –°–º–æ—Ç—Ä–∏—Ç–µ !—Å—Ç—Ä–æ–π–ª–∏—Å—Ç.", $data->object->from_id);
			}
		} elseif ($data->object->from_id == $gov["president_id"]) {
			$id = SocOrderClass::socOrderEncode($words[1]);
			if ($id != 0){
				$gov["soc_order"] = $id;
				$msg = "@id".$gov["president_id"]." (–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º) –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–æ–π.";
				$botModule->sendSimpleMessage($data->object->peer_id, $msg);
			} else {
				$botModule->sendSimpleMessage($data->object->peer_id, ", –¢–∞–∫–æ–≥–æ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç—Ä–æ—è –Ω–µ—Ç! –°–º–æ—Ç—Ä–∏—Ç–µ !—Å—Ç—Ä–æ–π–ª–∏—Å—Ç.", $data->object->from_id);
			}
		} else {
			$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏!", $data->object->from_id);
		}
	}
}

function goverment_socorderlist($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$words = $finput->words;
	$db = &$finput->db;

	$botModule = new BotModule($db);
	$array = SocOrderClass::TYPES;
	$msg = "";
	for($i = 0; $i < count($array); $i++){
		$msg = $msg."\n&#127381;".$array[$i];
	}

	$botModule->sendSimpleMessage($data->object->peer_id, ", –°–ø–∏—Å–æ–∫ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–æ–µ–≤: ".$msg, $data->object->from_id);
}

function goverment_anthem($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$words = $finput->words;
	$db = &$finput->db;

	$botModule = new BotModule($db);
	$gov = &$db["goverment"];
	if(count($data->object->attachments) == 0){
		if($gov["anthem"] != "nil"){
			vk_execute($botModule->makeExeAppeal($data->object->from_id)."
				return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+', &#129345;–ù–∞—à –≥–∏–º–Ω: ','attachment':'{$gov["anthem"]}'});
				");
		} else {
			$botModule->sendSimpleMessage($data->object->peer_id, ", &#129345;–£ –Ω–∞—Å –Ω–µ—Ç –≥–∏–º–Ω–∞!", $data->object->from_id);
		}
	} else {
		if($data->object->from_id == $gov["president_id"]){
			$first_audio_id = -1;
			$audio = "";
			for($i = 0; $i < count($data->object->attachments); $i++){
				if($data->object->attachments[$i]->type == "audio"){
					$first_audio_id = $i;
					break;
				}
			}
			if ($first_audio_id != -1){
				$audio = "audio".$data->object->attachments[$first_audio_id]->audio->owner_id."_".$data->object->attachments[$first_audio_id]->audio->id;
				$gov["anthem"] = $audio;
				$msg = "@id".$gov["president_id"]." (–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç) –∏–∑–º–µ–Ω–∏–ª –≥–∏–º–Ω –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞.";
				$botModule->sendSimpleMessage($data->object->peer_id, $msg);
			} else {
				$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–ê—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", $data->object->from_id);
			}
		} elseif($data->object->from_id == $gov["parliament_id"]){
			$first_audio_id = -1;
			$audio = "";
			for($i = 0; $i < count($data->object->attachments); $i++){
				if($data->object->attachments[$i]->type == "audio"){
					$first_audio_id = $i;
					break;
				}
			}
			if ($first_audio_id != -1){
				$audio = "audio".$data->object->attachments[$first_audio_id]->audio->owner_id."_".$data->object->attachments[$first_audio_id]->audio->id;
				$gov["anthem"] = $audio;
				$msg = "@id".$gov["parliament_id"]." (–ü–∞—Ä–ª–∞–º–µ–Ω—Ç) –∏–∑–º–µ–Ω–∏–ª –≥–∏–º–Ω –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞.";
				$botModule->sendSimpleMessage($data->object->peer_id, $msg);
			} else {
				$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–ê—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", $data->object->from_id);
			}
		} else {
			$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏!", $data->object->from_id);
		}
	}
}

function goverment_flag($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$words = $finput->words;
	$db = &$finput->db;

	$botModule = new BotModule($db);
	$gov = &$db["goverment"];
	if(count($data->object->attachments) == 0){
		if($gov["flag"] != "nil"){
			vk_execute($botModule->makeExeAppeal($data->object->from_id)."
				return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+', &#127987;–ù–∞—à —Ñ–ª–∞–≥: ','attachment':'{$gov["flag"]}'});
				");
		} else {
			$botModule->sendSimpleMessage($data->object->peer_id, ", &#127987;–£ –Ω–∞—Å –Ω–µ—Ç —Ñ–ª–∞–≥–∞!", $data->object->from_id);
		}
	} else {
		if($data->object->from_id == $gov["president_id"]){
			$first_photo_id = -1;
			$photo = "";
			for($i = 0; $i < count($data->object->attachments); $i++){
				if($data->object->attachments[$i]->type == "photo"){
					$first_photo_id = $i;
					break;
				}
			}
			if ($first_photo_id != -1){
				$photo_sizes = $data->object->attachments[$first_photo_id]->photo->sizes;
				$photo_url_index = 0;
				for($i = 0; $i < count($photo_sizes); $i++){
					if($photo_sizes[$i]->height > $photo_sizes[$photo_url_index]->height){
						$photo_url_index = $i;
					}
				}
				$photo_url = $photo_sizes[$photo_url_index]->url;
				$path = BOT_TMPDIR."/photo".mt_rand(0, 65500).".jpg";
				file_put_contents($path, file_get_contents($photo_url));
				$response =  json_decode(vk_execute($botModule->makeExeAppeal($data->object->from_id)."
					return API.photos.getMessagesUploadServer({'peer_id':{$data->object->peer_id}});"));
				$res = json_decode(vk_uploadDocs(array('photo' => new CURLFile($path)), $response->response->upload_url));
				unlink($path);
				$msg = "@id".$gov["president_id"]." (–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç) –∏–∑–º–µ–Ω–∏–ª —Ñ–ª–∞–≥ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞.";
				$res_json = json_encode(array('photo' => $res->photo, 'server' => $res->server, 'hash' => $res->hash));
				$photo = json_decode(vk_execute("var doc = API.photos.saveMessagesPhoto({$res_json});
					API.messages.send({'peer_id':{$data->object->peer_id},'message':'{$msg}'});
					return doc;
					"))->response[0];
				$gov["flag"] = "photo{$photo->owner_id}_{$photo->id}";
			} else {
				$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", $data->object->from_id);
			}
		} elseif($data->object->from_id == $gov["parliament_id"]){
			$first_photo_id = -1;
			$photo = "";
			for($i = 0; $i < count($data->object->attachments); $i++){
				if($data->object->attachments[$i]->type == "photo"){
					$first_photo_id = $i;
					break;
				}
			}
			if ($first_photo_id != -1){
				$photo_sizes = $data->object->attachments[$first_photo_id]->photo->sizes;
				$photo_url_index = 0;
				for($i = 0; $i < count($photo_sizes); $i++){
					if($photo_sizes[$i]->height > $photo_sizes[$photo_url_index]->height){
						$photo_url_index = $i;
					}
				}
				$photo_url = $photo_sizes[$photo_url_index]->url;
				$path = BOT_TMPDIR."/photo".mt_rand(0, 65500).".jpg";
				file_put_contents($path, file_get_contents($photo_url));
				$response =  json_decode(vk_execute($botModule->makeExeAppeal($data->object->from_id)."
					return API.photos.getMessagesUploadServer({'peer_id':{$data->object->peer_id}});"));
				$res = json_decode(vk_uploadDocs(array('photo' => new CURLFile($path)), $response->response->upload_url));
				unlink($path);
				$msg = "@id".$gov["parliament_id"]." (–ü–∞—Ä–ª–∞–º–µ–Ω—Ç) –∏–∑–º–µ–Ω–∏–ª —Ñ–ª–∞–≥ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞.";
				$res_json = json_encode(array('photo' => $res->photo, 'server' => $res->server, 'hash' => $res->hash));
				$photo = json_decode(vk_execute("var doc = API.photos.saveMessagesPhoto({$res_json});
					API.messages.send({'peer_id':{$data->object->peer_id},'message':'{$msg}'});
					return doc;
					"))->response[0];
				$gov["flag"] = "photo{$photo->owner_id}_{$photo->id}";
			} else {
				$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", $data->object->from_id);
			}
		} else {
			$botModule->sendSimpleMessage($data->object->peer_id, ", &#9940;–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏!", $data->object->from_id);
		}
	}
}

function goverment_referendum_start($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$words = $finput->words;
	$db = &$finput->db;

	$botModule = new BotModule($db);
	if(!bot_check_reg($db)){
			vk_execute($botModule->makeExeAppeal($data->object->from_id)."
				return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+', –¥–∞–Ω–Ω–∞—è –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!'});
				");
			return 'error';
	}

	if($data->object->from_id == $db["goverment"]["parliament_id"]){
		if(!array_key_exists("referendum", $db["goverment"])){
			$db["goverment"]["referendum"]["candidate1"] = array('id' => 0, "voters_count" => 0);
			$db["goverment"]["referendum"]["candidate2"] = array('id' => 0, "voters_count" => 0);
			$db["goverment"]["referendum"]["all_voters"] = array();
			$db["goverment"]["referendum"]["start_time"] = $data->object->date;
			$db["goverment"]["referendum"]["last_notification_time"] = $data->object->date;
			$msg = "–ù–∞—á–∞–ª–∏—Å—å –≤—ã–±–æ—Ä—ã –≤ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—ã –±–µ—Å–µ–¥—ã. –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \\\"!candidate\\\".";
			vk_execute("
				return API.messages.send({'peer_id':{$data->object->peer_id},'message':'{$msg}'});");
		} else {
			$msg = ", –≤—ã–±–æ—Ä—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥—è—Ç.";
			vk_execute($botModule->makeExeAppeal($data->object->from_id)."
				return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+'{$msg}'});");
		}
	} else {
		$msg = ", &#9940;—É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.";
			vk_execute($botModule->makeExeAppeal($data->object->from_id)."
				return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+'{$msg}'});");
	}
}

function goverment_referendum_stop($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$words = $finput->words;
	$db = &$finput->db;

	$botModule = new BotModule($db);
	if(!bot_check_reg($db)){
			vk_execute($botModule->makeExeAppeal($data->object->from_id)."
				return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+', –¥–∞–Ω–Ω–∞—è –±–µ—Å–µ–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!'});
				");
			return 'error';
	}

	if($data->object->from_id == $db["goverment"]["parliament_id"]){
		if(!array_key_exists("referendum", $db["goverment"])){
			$msg = ", —Å–µ–π—á–∞—Å –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤—ã–±–æ—Ä—ã.";
			vk_execute($botModule->makeExeAppeal($data->object->from_id)."
				return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+'{$msg}'});");
		} else {
			unset($db["goverment"]["referendum"]);
			$msg = ", –≤—ã–±–æ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.";
			vk_execute($botModule->makeExeAppeal($data->object->from_id)."
				return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+'{$msg}'});");
		}
	} else {
		$msg = ", &#9940;—É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.";
			vk_execute($botModule->makeExeAppeal($data->object->from_id)."
				return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+'{$msg}'});");
	}
}

function goverment_referendum_candidate($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$words = $finput->words;
	$db = &$finput->db;

	$botModule = new BotModule($db);
	if(array_key_exists("referendum", $db["goverment"])){
		if($db["goverment"]["referendum"]["candidate1"]["id"] != $data->object->from_id && $db["goverment"]["referendum"]["candidate2"]["id"] != $data->object->from_id){
			if($db["goverment"]["referendum"]["candidate1"]["id"] == 0){
				$db["goverment"]["referendum"]["candidate1"]["id"] = $data->object->from_id;
				$msg = ", –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç ‚Ññ1.";
				vk_execute($botModule->makeExeAppeal($data->object->from_id)."
					return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+'{$msg}'});");
			} elseif($db["goverment"]["referendum"]["candidate2"]["id"] == 0) {
				$db["goverment"]["referendum"]["candidate2"]["id"] = $data->object->from_id;
				$msg1 = ", –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç ‚Ññ2.";
				$msg2 = "–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞–±—Ä–∞–Ω—ã, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π \\\"!vote\\\", —á—Ç–æ–±—ã —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏.";
				vk_execute($botModule->makeExeAppeal($data->object->from_id)."
					API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+'{$msg1}'});
					return API.messages.send({'peer_id':{$data->object->peer_id},'message':'{$msg2}'});");
				$db["goverment"]["referendum"]["last_notification_time"] = $data->object->date;
			} else {
				$msg = ", –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —É–∂–µ –Ω–∞–±—Ä–∞–Ω—ã.";
				vk_execute($botModule->makeExeAppeal($data->object->from_id)."
					return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+'{$msg}'});");
			}
		} else {
			$msg = ", –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç –≤ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—ã.";
				vk_execute($botModule->makeExeAppeal($data->object->from_id)."
					return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+'{$msg}'});");
		}
	} else {
		$msg = ", —Å–µ–π—á–∞—Å –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤—ã–±–æ—Ä—ã.";
		vk_execute($botModule->makeExeAppeal($data->object->from_id)."
			return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+'{$msg}'});");
	}
}

function goverment_referendum_system($data, &$db){
	if(array_key_exists("referendum", $db["goverment"])){
		if($data->object->date - $db["goverment"]["referendum"]["last_notification_time"] >= 600){
			if($db["goverment"]["referendum"]["candidate1"]["id"] == 0 || $db["goverment"]["referendum"]["candidate2"]["id"] == 0){
				$msg = "–ù–∞—á–∞–ª–∏—Å—å –≤—ã–±–æ—Ä—ã –≤ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—ã –±–µ—Å–µ–¥—ã. –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \\\"!candidate\\\".";
				vk_execute("
				return API.messages.send({'peer_id':{$data->object->peer_id},'message':'{$msg}'});");
			} else {
				$msg = "–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞–±—Ä–∞–Ω—ã, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π \\\"!vote\\\", —á—Ç–æ–±—ã —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏.";
				vk_execute("
				return API.messages.send({'peer_id':{$data->object->peer_id},'message':'{$msg}'});");
			}
			$db["goverment"]["referendum"]["last_notification_time"] = $data->object->date;
		} elseif($data->object->date - $db["goverment"]["referendum"]["start_time"] >= 18000) {
			if($db["goverment"]["referendum"]["candidate1"]["id"] == 0 || $db["goverment"]["referendum"]["candidate2"]["id"] == 0){
				$msg = "‚ùó–í—ã–±–æ—Ä—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: –Ω–µ –Ω–∞–±—Ä–∞–Ω–æ –Ω—É–∂–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.";
				vk_execute("
				return API.messages.send({'peer_id':{$data->object->peer_id},'message':'{$msg}'});");
				unset($db["goverment"]["referendum"]);
			} else {
				$candidate1_voters_count = $db["goverment"]["referendum"]["candidate1"]["voters_count"];
				$candidate2_voters_count = $db["goverment"]["referendum"]["candidate2"]["voters_count"];
				$all_voters_count = sizeof($db["goverment"]["referendum"]["all_voters"]);
				if($candidate1_voters_count > $candidate2_voters_count){
					$candidate_id = $db["goverment"]["referendum"]["candidate1"]["id"];
					$candidate_percent = round($candidate1_voters_count/$all_voters_count*100, 1);
					$res = json_decode(vk_execute("
						var users = API.users.get({'user_ids':[{$candidate_id}],'fields':'first_name_gen,last_name_gen,sex'});
						var sex_word = '–û–Ω';
						if(users[0].sex == 1){
							sex_word = '–û–Ω–∞';
						}
						var msg = '‚úÖ–ù–∞ –≤—ã–±–æ—Ä–∞—Ö –ø–æ–±–µ–∂–¥–∞–µ—Ç @id'+users[0].id+' ('+users[0].first_name+' '+users[0].last_name+'). '+sex_word+' –ø–æ–±–µ–∂–¥–∞–µ—Ç, –Ω–∞–±—Ä–∞–≤ {$candidate_percent}% –≥–æ–ª–æ—Å–æ–≤ –∏–∑–±–∏—Ä–∞—Ç–µ–ª–µ–π. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!';
						API.messages.send({'peer_id':{$data->object->peer_id},'message':msg});
						return {'first_name_gen':users[0].first_name_gen,'last_name_gen':users[0].last_name_gen};"));
					$ranksys = new RankSystem($db);
					$ranksys->setUserRank($gov["president_id"], -1);
					$ranksys->setUserRank($candidate_id, 1);
					$economy = new Economy\Main($db); // –ú–æ–¥—É–ª—å –≠–∫–æ–Ω–æ–º–∏–∫–∏
					$economy->getUser($gov["president_id"])->deleteItem("govdoc", "presidential_certificate"); // –£–±–∏—Ä–∞–µ–º —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
					$economy->getUser($candidate_id)->changeItem("govdoc", "presidential_certificate", 1); // –í—ã–¥–∞–µ–º —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –Ω–æ–≤–æ–º—É
					$db["goverment"]["president_id"] = $candidate_id;
					$db["goverment"]["batch_name"] = "–ü–æ–ª–∏—Ç. –ø–∞—Ä—Ç–∏—è ".$res->response->first_name_gen." ".$res->response->last_name_gen;
					unset($db["goverment"]["referendum"]);
				} elseif($candidate1_voters_count < $candidate2_voters_count) {
					$candidate_id = $db["goverment"]["referendum"]["candidate2"]["id"];
					$candidate_percent = round($candidate2_voters_count/$all_voters_count*100, 1);
					$res = json_decode(vk_execute("
						var users = API.users.get({'user_ids':[{$candidate_id}],'fields':'first_name_gen,last_name_gen,sex'});
						var sex_word = '–û–Ω';
						if(users[0].sex == 1){
							sex_word = '–û–Ω–∞';
						}
						var msg = '‚úÖ–ù–∞ –≤—ã–±–æ—Ä–∞—Ö –ø–æ–±–µ–∂–¥–∞–µ—Ç @id'+users[0].id+' ('+users[0].first_name+' '+users[0].last_name+'). '+sex_word+' –ø–æ–±–µ–∂–¥–∞–µ—Ç, –Ω–∞–±—Ä–∞–≤ {$candidate_percent}% –≥–æ–ª–æ—Å–æ–≤ –∏–∑–±–∏—Ä–∞—Ç–µ–ª–µ–π. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!';
						API.messages.send({'peer_id':{$data->object->peer_id},'message':msg});
						return {'first_name_gen':users[0].first_name_gen,'last_name_gen':users[0].last_name_gen};"));
					$ranksys = new RankSystem($db);
					$ranksys->setUserRank($gov["president_id"], -1);
					$ranksys->setUserRank($candidate_id, 1);
					$economy = new Economy\Main($db); // –ú–æ–¥—É–ª—å –≠–∫–æ–Ω–æ–º–∏–∫–∏
					$economy->getUser($gov["president_id"])->deleteItem("govdoc", "presidential_certificate");  // –£–±–∏—Ä–∞–µ–º —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
					$economy->getUser($candidate_id)->changeItem("govdoc", "presidential_certificate", 1);  // –í—ã–¥–∞–µ–º —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –Ω–æ–≤–æ–º—É
					$db["goverment"]["president_id"] = $candidate_id;
					$db["goverment"]["batch_name"] = "–ü–æ–ª–∏—Ç. –ø–∞—Ä—Ç–∏—è ".$res->response->first_name_gen." ".$res->response->last_name_gen;
					unset($db["goverment"]["referendum"]);
				} else {
				$msg = "‚ùó–í—ã–±–æ—Ä—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: –æ–±–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞–±—Ä–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤.";
				vk_execute("
					return API.messages.send({'peer_id':{$data->object->peer_id},'message':'{$msg}'});");
				unset($db["goverment"]["referendum"]);
				}
			}
		}

		if(!is_null($data->object->payload)){
			$payload = json_decode($data->object->payload);
			if($payload->command == "referendum_vote"){
				$botModule = new BotModule($db);
				if(is_numeric($payload->vote_candidate_id)){
					if ($payload->vote_candidate_id == 0){
						$msg = "‚ùó–ú–µ–Ω—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–æ.";
						vk_execute("return API.messages.send({'peer_id':{$data->object->peer_id},'message':'{$msg}','keyboard':'{\\\"one_time\\\":true,\\\"buttons\\\":[]}'});");
						return;
					}

					for($i = 0; $i < sizeof($db["goverment"]["referendum"]["all_voters"]); $i++){
						if($db["goverment"]["referendum"]["all_voters"][$i] == $data->object->from_id){
							$msg = ", ‚õî–≤—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏.";
							vk_execute($botModule->makeExeAppeal($data->object->from_id)."
								return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+'{$msg}'});");
							return;
						}
					}

					if($payload->vote_candidate_id == 1){
						$db["goverment"]["referendum"]["all_voters"][] = $data->object->from_id;
						$db["goverment"]["referendum"]["candidate1"]["voters_count"] = $db["goverment"]["referendum"]["candidate1"]["voters_count"] + 1;
						$candidate_id = $db["goverment"]["referendum"]["candidate1"]["id"];
						vk_execute($botModule->makeExeAppeal($data->object->from_id)."
							var user = API.users.get({'user_ids':[{$candidate_id}]});
							var msg = ', üìù–≤—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ @id'+user[0].id+' ('+user[0].first_name+' '+user[0].last_name+').';
							return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+msg});");

					} elseif ($payload->vote_candidate_id == 2){
						$db["goverment"]["referendum"]["all_voters"][] = $data->object->from_id;
						$db["goverment"]["referendum"]["candidate2"]["voters_count"] = $db["goverment"]["referendum"]["candidate2"]["voters_count"] + 1;
						$candidate_id = $db["goverment"]["referendum"]["candidate2"]["id"];
						vk_execute($botModule->makeExeAppeal($data->object->from_id)."
							var user = API.users.get({'user_ids':[{$candidate_id}]});
							var msg = ', üìù–≤—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ @id'+user[0].id+' ('+user[0].first_name+' '+user[0].last_name+').';
							return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+msg});");
					}
				}
			}
		}
	}
}

function goverment_referendum_vote($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$words = $finput->words;
	$db = &$finput->db;

	$botModule = new BotModule($db);
	if(array_key_exists("referendum", $db["goverment"])){
		if($db["goverment"]["referendum"]["candidate1"]["id"] != 0 && $db["goverment"]["referendum"]["candidate2"]["id"] != 0){
			for($i = 0; $i < sizeof($db["goverment"]["referendum"]["all_voters"]); $i++){
				if($db["goverment"]["referendum"]["all_voters"][$i] == $data->object->from_id){
					$msg = ", ‚õî–≤—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏.";
					vk_execute($botModule->makeExeAppeal($data->object->from_id)."
						return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+'{$msg}'});");
					return;
				}
			}

			$candidate1_id = $db["goverment"]["referendum"]["candidate1"]["id"];
			$candidate2_id = $db["goverment"]["referendum"]["candidate2"]["id"];

			vk_execute($botModule->makeExeAppeal($data->object->from_id)."
				var users = API.users.get({'user_ids':[{$candidate1_id},{$candidate2_id}]});

				var button_candidate1 = '{\\\"action\\\":{\\\"type\\\":\\\"text\\\",\\\"label\\\":\\\"üìù'+users[0].first_name.substr(0, 2)+'. '+users[0].last_name+'\\\",\\\"payload\\\":\\\"{\\\\\"command\\\\\":\\\\\"referendum_vote\\\\\",\\\\\"vote_candidate_id\\\\\":\\\\\"1\\\\\"}\\\"},\\\"color\\\":\\\"primary\\\"}';
				var button_candidate2 = '{\\\"action\\\":{\\\"type\\\":\\\"text\\\",\\\"label\\\":\\\"üìù'+users[1].first_name.substr(0, 2)+'. '+users[1].last_name+'\\\",\\\"payload\\\":\\\"{\\\\\"command\\\\\":\\\\\"referendum_vote\\\\\",\\\\\"vote_candidate_id\\\\\":\\\\\"2\\\\\"}\\\"},\\\"color\\\":\\\"primary\\\"}';
				var button_cancel = '{\\\"action\\\":{\\\"type\\\":\\\"text\\\",\\\"label\\\":\\\"–ó–∞–∫—Ä—ã—Ç—å\\\",\\\"payload\\\":\\\"{\\\\\"command\\\\\":\\\\\"referendum_vote\\\\\",\\\\\"vote_candidate_id\\\\\":\\\\\"0\\\\\"}\\\"},\\\"color\\\":\\\"negative\\\"}';

				var keyboard = '{\\\"one_time\\\":false,\\\"buttons\\\":[['+button_candidate1+','+button_candidate2+'],['+button_cancel+']]}';

				var msg = ', —É—á–∞–≤—Å—Ç–≤—É–π –≤ –≤—ã–±–æ—Ä–∞—Ö –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–≥–æ—Å—è —Ç–µ–±–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ —Ç—ã –æ—Ç–¥–∞—à—å –∑–∞ –Ω–µ–≥–æ —Å–≤–æ–π –≥–æ–ª–æ—Å. –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:\\n‚úÖ@id'+users[0].id+' ('+users[0].first_name+' '+users[0].last_name+')\\n‚úÖ@id'+users[1].id+' ('+users[1].first_name+' '+users[1].last_name+')';

				return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+msg,'keyboard':keyboard});
				");
		} else {
			$msg = ", –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –µ—â–µ –Ω–µ –Ω–∞–±—Ä–∞–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –±–∞–ª–æ—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É \\\"!candidate\\\".";
				vk_execute($botModule->makeExeAppeal($data->object->from_id)."
				return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+'{$msg}'});");
		}
	} else {
		$msg = ", —Å–µ–π—á–∞—Å –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤—ã–±–æ—Ä—ã.";
		vk_execute($botModule->makeExeAppeal($data->object->from_id)."
			return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+'{$msg}'});");
	}
}

?>