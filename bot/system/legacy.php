<?php

// –ú–æ–¥—É–ª—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è Legacy —Ñ—É–Ω–∫—Ü–∏–π
namespace Legacy{
	function fun_db_get($db){
		if(array_key_exists('fun', $db))
			return $db["fun"];
		else
			return array();
	}

	function fun_db_set(&$db, $array){
		$db["fun"] = $array;
	}

	function fun_luba_menu($data, $fun, $msg, $botModule){
		$keyboard_array = array();
		if(!$fun["luba"]["isSleeping"]){
			$b1 = array(
				vk_text_button("–ü–æ–∫–æ—Ä–º–∏—Ç—å", array('command'=>'fun','meme_id'=>5,'act'=>0), "primary"),
				vk_text_button("–î–∞—Ç—å –ø–æ–ø–∏—Ç—å", array('command'=>'fun','meme_id'=>5,'act'=>1), "primary"),

			);
			$b2 = array(
				vk_text_button("–ü–æ–∏–≥—Ä–∞—Ç—å", array('command'=>'fun','meme_id'=>5,'act'=>4), "primary"),
				vk_text_button("–ü–æ–≥–ª–∞–¥–∏—Ç—å", array('command'=>'fun','meme_id'=>5,'act'=>5), "primary"),
			);
			$b3 = array(
				vk_text_button("–°–ø–∞—Ç—å", array('command'=>'fun','meme_id'=>5,'act'=>2), "positive"),
				vk_text_button("–ó–∞–∫—Ä—ã—Ç—å", array('command'=>'fun','meme_id'=>5,'act'=>3), "negative")
			);
			$keyboard_array = array($b1, $b2, $b3);
		} else {
			$b1 = array(vk_text_button("–†–∞–∑–±—É–¥–∏—Ç—å", array('command'=>'fun','meme_id'=>5,'act'=>2), "positive"));
			$b2 = array(vk_text_button("–ó–∞–∫—Ä—ã—Ç—å", array('command'=>'fun','meme_id'=>5,'act'=>3), "negative"));
			$keyboard_array = array($b1, $b2);
		}
		$keyboard = vk_keyboard(true, $keyboard_array);
		$hungry = $fun["luba"]["hungry"];
		$thirst = $fun["luba"]["thirst"];
		$happiness = $fun["luba"]["happiness"];
		$cheerfulness = $fun["luba"]["cheerfulness"];
		$json_request = json_encode(array('peer_id' => $data->object->peer_id, 'message' => "%appeal%{$msg}\n‚úÖ–°—ã—Ç–æ—Å—Ç—å: {$hungry}/100\n‚úÖ–ñ–∞–∂–¥–∞: {$thirst}/100\n‚úÖ–°—á–∞—Å—Ç—å–µ: {$happiness}/100\n‚úÖ–ë–æ–¥—Ä–æ—Å—Ç—å: {$cheerfulness}/100", 'keyboard' => $keyboard), JSON_UNESCAPED_UNICODE);
		$json_request = vk_parse_var($json_request, "appeal");
		vk_execute($botModule->makeExeAppealByID($data->object->from_id)."return API.messages.send({$json_request});");
	}

	class SysMemes{
		const MEMES = array('–º–µ–º—ã', 'f', 'topa', '–∞–Ω–¥—Ä–µ–π', '–æ–ª–µ–≥', '—è–±–ª–æ–≤–æ–¥', '–ª—é–±–∞', '–∫–µ—Ä–∏–ª', '—é–ª—è', '–æ–ª–¥—ã —Ç—É—Ç?', '–∫–±', '–Ω–µ–∫–∏—Ç–∞', '–µ–≥–æ—Ä', '–∫—Å—é—à–∞', '–¥—Ä–æ—á–∏—Ç—å', '—Å–∞–Ω—è', '–∞–ª—è', '–¥—Ä–æ—á–∏—Ç—å –Ω–∞ —á—É–ª–∫–∏', '–¥—Ä–æ—á–∏—Ç—å –Ω–∞ –∫–∞—Ä–∏–Ω—É', '–¥—Ä–æ—á–∏—Ç—å –Ω–∞ –∞–º–∏–Ω—É', '–æ—Ñ—Ñ–Ω–∏–∫–∏', '–ø–∞—à–µ–ª –Ω–∞—Ö—É–π', '–ª–æ—Ö–∏ –±–µ—Å–µ–¥—ã', '–¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 'memory_get_usage', "memory_get_usage_real");

		public static function isExists($meme_name){
			$exists = false;
			for($i = 0; $i < count(self::MEMES); $i++){
				if(self::MEMES[$i] == $meme_name){
					$exists = true;
					break;
				}
			}

			return $exists;
		}

		public static function handler($data, $meme_name, &$db){
			$chatModes = new \ChatModes($db);
			if(!$chatModes->getModeValue("allow_memes") || !$chatModes->getModeValue("legacy_enabled"))
				return;

			if(!self::isExists($meme_name))
				return false;
			$botModule = new \BotModule($db);

			switch ($meme_name) {
				case '–º–µ–º—ã';
				$meme_str_list = "";
				for($i = 0; $i < count(self::MEMES); $i++){
					$name = self::MEMES[$i];
					if($meme_str_list == "")
						$meme_str_list = "[{$name}]";
					else
						$meme_str_list = $meme_str_list . ", [{$name}]";
				}
				$botModule->sendSilentMessage($data->object->peer_id, ", üìù—Å–ø–∏—Å–æ–∫ –°–ò–°–¢–ï–ú–ù–´–• –º–µ–º–æ–≤:\n".$meme_str_list, $data->object->from_id);
				break;

				case 'f':
				vk_call('messages.send', array('peer_id' => $data->object->peer_id, 'message' => 'F', 'attachment' => 'photo-161901831_456239025'));
				break;

				case 'topa':
				vk_call('messages.send', array('peer_id' => $data->object->peer_id, 'attachment' => 'photo-161901831_456239028'));
				break;

				case 'mem1':
				vk_call('messages.send', array('peer_id' => $data->object->peer_id, 'attachment' => 'photo-161901831_456239029'));
				break;

				case 'mem2':
				vk_call('messages.send', array('peer_id' => $data->object->peer_id, 'attachment' => 'photo-161901831_456239031'));
				break;

				case '–∞–Ω–¥—Ä–µ–π':
				vk_call('messages.send', array('peer_id' => $data->object->peer_id, 'message' => "@id202643466 (–ì–æ–æ–æ–æ–Ω–¥–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–Ω!)"));
				return 'ok';
				break;

				case '–æ–ª–µ–≥':
				vk_call('messages.send', array('peer_id' => $data->object->peer_id, 'message' => "@id278561962 (–ü–∏–∏–∏–∏–¥–æ–æ–æ–æ—Ä!)", 'attachment' => 'photo-161901831_456239033'));
				return 'ok';
				break;

				case '—è–±–ª–æ–≤–æ–¥':
				vk_call('messages.send', array('peer_id' => $data->object->peer_id, 'message' => "IT'S REVOLUTION JOHNY!"));
				return 'ok';
				break;

				case '–ª—é–±–∞':
				$s1 = array(vk_text_button("–õ—é–±–∞‚ù§", array('command'=>'fun','meme_id'=>1), "positive"), vk_text_button("–õ—é–±–∞üñ§", array('command'=>'fun','meme_id'=>1), "primary"), vk_text_button("–õ—é–±–∞üíô", array('command'=>'fun','meme_id'=>1), "positive"));
				$s2 = array(vk_text_button("–õ—é–±–∞üíö", array('command'=>'fun','meme_id'=>1), "primary"), vk_text_button("–õ—é–±–∞üíõ", array('command'=>'fun','meme_id'=>1), "positive"), vk_text_button("–õ—é–±–∞üíñ", array('command'=>'fun','meme_id'=>1), "primary"));
				$keyboard = vk_keyboard(true, array($s1, $s2));
				$msg = "–û–±–∞–Ω–∞, –∫–Ω–æ–ø–æ—á–∫–∏!";
				$json_request = json_encode(array('peer_id' => $data->object->peer_id, 'message' => $msg, 'keyboard' => $keyboard), JSON_UNESCAPED_UNICODE);
				vk_execute($botModule->makeExeAppealByID($data->object->from_id)."
					return API.messages.send({$json_request});
					");
				//vk_call('messages.send', array('peer_id' => $data->object->peer_id, 'message' => '@id317258850 (<3)', 'attachment' => 'photo-161901831_456239030'));
				//vk_call('messages.send', array('peer_id' => $data->object->peer_id, 'message' => "@id278561962 (–û–ª–µ–∂–∞) +"." @id317258850 (–õ—é–±–∞) = &#10084;&#128420;&#128154;&#128155;&#128156;&#128153;"));
				//$code = bot_draw_luba($data);
				//vk_execute($code);
				return 'ok';
				break;

				case '-–ª—é–±–∞':
				$fun = fun_db_get($db);
				$botModule = new \BotModule($db);
				if(!array_key_exists("luba", $fun)){
					$fun["luba"]["hungry"] = 50;
					$fun["luba"]["thirst"] = 50;
					$fun["luba"]["happiness"] = 50;
					$fun["luba"]["isSleeping"] = false;
					$fun["luba"]["cheerfulness"] = 50;
					$fun["luba"]["last_db_update_date"] = time();
				}
				$hungry = $fun["luba"]["hungry"];
				$thirst = $fun["luba"]["thirst"];
				$happiness = $fun["luba"]["happiness"];
				$cheerfulness = $fun["luba"]["cheerfulness"];
				$msg = ", @id317258850 (–õ—é–±–∞) - —ç—Ç–æ –∫–æ—Ç–µ–Ω–æ—á–µ–∫üò∫. –£—Ö–∞–∂–∏–≤–∞–π—Ç–µ –∑–∞ –Ω–µ–π –∏ –¥–µ–ª–∞–π—Ç–µ –µ–µ —Å—á–∞—Å—Ç–ª–∏–≤–æ–π.";
				fun_luba_menu($data, $fun, $msg, $botModule);
				fun_db_set($db, $fun);
				return;
				break;

				case '–∫–µ—Ä–∏–ª':
				$keyboard = vk_keyboard(true, array(array(vk_text_button("–ö–∏—Ä–∏–ª–ª", array('command'=>'fun','meme_id'=>3,'selected'=>1), "positive")), array(vk_text_button("–ö–µ—Ä–∏–ª", array('command'=>'fun','meme_id'=>3,'selected'=>1), "negative"))));
				$json_request = json_encode(array('peer_id' => $data->object->peer_id, 'message' => 'üåö', 'keyboard' => $keyboard), JSON_UNESCAPED_UNICODE);
				vk_execute("API.messages.send({$json_request});");
				return 'ok';
				break;

				case '–≤–ª–∞–¥':
				vk_call('messages.send', array('peer_id' => $data->object->peer_id, 'message' => "@id368814064 (–î–∞–ª–±–∞–∞–∞–∞–∞–∞–∞–∞—ë—ë—ë—ë—ë—ë—ë—ë—ë—ë—ë—ë—ë—ë–±!)"));
				return 'ok';

				case '—é–ª—è':
				vk_call('messages.send', array('peer_id' => $data->object->peer_id, 'message' => "@id477530202 (–î–æ—Å–∫–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞)"));
				return 'ok';

				case '–æ–ª–¥—ã —Ç—É—Ç?':
				$msg = ", –¢–£–¢!";
				vk_execute($botModule->makeExeAppealByID($data->object->from_id)."
					return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+'{$msg}'});
					");
				return 'ok';
				break;

				case '–∫–±':
				$msg = "–°–û–°–ê–¢–¨!";
				vk_execute($botModule->makeExeAppealByID($data->object->from_id)."
					return API.messages.send({'peer_id':{$data->object->peer_id},'message':'{$msg}'});");
				return 'ok';
				break;

				case '–Ω–µ–∫–∏—Ç–∞':
				$msg = "@id438333657 (–ö–æ—Ä–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ–µ—Ü)";
				vk_execute($botModule->makeExeAppealByID($data->object->from_id)."
					return API.messages.send({'peer_id':{$data->object->peer_id},'message':'{$msg}'});");
				return 'ok';
				break;

				case '–µ–≥–æ—Ä':
				$msg = " - –∑–∞–¥—Ä–æ—Ç.";
				vk_execute($botModule->makeExeAppealByID(458598210)."
					return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+'{$msg}'});");
				return 'ok';
				break;

				case '–¥–∞–Ω–∏–ª':
				$msg = "@midas325 (–±–∞–Ω)";
				vk_execute("
					return API.messages.send({'peer_id':{$data->object->peer_id},'message':'{$msg}'});");
				return 'ok';

				case '–≤–æ–≤–∞':
				$msg = "@e_t_e_r_n_a_l_28 (–ú—É—É—É—É—É—É—É—É—É—É–¥–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∫)";
				vk_execute("
					return API.messages.send({'peer_id':{$data->object->peer_id},'message':'{$msg}'});");
				return 'ok';

				case '–∫—Å—é—à–∞':
				$msg = "@id332831736 (–®–õ–Æ–®–ê)";
				vk_execute("
					return API.messages.send({'peer_id':{$data->object->peer_id},'message':'{$msg}','attachment':'photo-161901831_456239032'});");
				return 'ok';

				case '–¥—Ä–æ—á–∏—Ç—å':
				$keyboard = vk_keyboard(true, array(array(vk_text_button("–î—Ä–æ—á–∏—Ç—å", array('command'=>'fun','meme_id'=>2,'act'=>1,'napkin'=>0), "primary")), array(vk_text_button("–í–∑—è—Ç—å —Å–∞–ª—Ñ–µ—Ç–∫—É", array('command'=>'fun','meme_id'=>2,'act'=>2), "positive"))));
				$json_request = json_encode(array('peer_id' => $data->object->peer_id, 'message' => 'üåö', 'keyboard' => $keyboard), JSON_UNESCAPED_UNICODE);
				vk_execute("API.messages.send({$json_request});");
				return 'ok';
				break;

				case '—Å–∞–Ω—è':
				$msg = "@id244486535 (–°–∞—à–∞), —ç—Ç–æ –¥–ª—è —Ç–µ–±—èüíúüíúüíú";
				vk_execute("
					return API.messages.send({'peer_id':{$data->object->peer_id},'message':'{$msg}','attachment':'audio219011658_456239231'});");
				return 'ok';
				break;

				case '–∞–ª—è':
				$a1 = array(
					vk_text_button("–ü–æ–≥–ª–∞–¥–∏—Ç—å", array('command'=>'fun','meme_id'=>4,'act'=>1), "primary"),
					vk_text_button("–ü–æ–∫–æ—Ä–º–∏—Ç—å", array('command'=>'fun','meme_id'=>4,'act'=>2), "primary")
				);
				$a2 = array(
					vk_text_button("–ü–æ–∏–≥—Ä–∞—Ç—å", array('command'=>'fun','meme_id'=>4,'act'=>3), "primary"),
					vk_text_button("–†–∞—Å—á–µ—Å–∞—Ç—å", array('command'=>'fun','meme_id'=>4,'act'=>4), "primary")
				);
				$a3 = array(
					vk_text_button("–ü–æ–≥—É–ª—è—Ç—å", array('command'=>'fun','meme_id'=>4,'act'=>5), "positive"),
					vk_text_button("–ö—É–ø–∏—Ç—å –æ–¥–µ–∂–¥—É", array('command'=>'fun','meme_id'=>4,'act'=>6), "positive")
				);
				$a4 = array(
					vk_text_button("–£–±—Ä–∞—Ç—å –ª–æ—Ç–æ–∫", array('command'=>'fun','meme_id'=>4,'act'=>8), "positive"),
					vk_text_button("–°—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞—Ç—å", array('command'=>'fun','meme_id'=>4,'act'=>7), "negative")
				);
				$keyboard = vk_keyboard(true, array($a1, $a2, $a3, $a4));
				$json_request = json_encode(array('peer_id' => $data->object->peer_id, 'message' => '–ê–ª–µ—á–∫–∞ - –∫–æ—Ç–µ–Ω–æ—á–µ–∫üò∫! –ü–æ—É—Ö–∞–∂–∏–≤–∞–π—Ç–µ –∑–∞ –Ω–µ–π!üòªüòªüòª', 'keyboard' => $keyboard), JSON_UNESCAPED_UNICODE);
				vk_execute("API.messages.send({$json_request});");
				break;

				case '–¥—Ä–æ—á–∏—Ç—å –Ω–∞ —á—É–ª–∫–∏':
				$keyboard = vk_keyboard(false, array(array(vk_text_button("–ß—É–ª–∫–∏", array('command'=>'fun','meme_id'=>6), "positive")), array(vk_text_button("–£–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É", array('command'=>'fun','meme_id'=>-1), "negative"))));
				$json_request = json_encode(array('peer_id' => $data->object->peer_id, 'message' => '–†–µ–∂–∏–º "–î—Ä–æ—á–∏—Ç—å –Ω–∞ —á—É–ª–∫–∏" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –Ω–∞–ø–∏—à–∏—Ç–µ –£–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.', 'keyboard' => $keyboard), JSON_UNESCAPED_UNICODE);
				vk_execute("API.messages.send({$json_request});");
				break;

				case '–¥—Ä–æ—á–∏—Ç—å –Ω–∞ –∫–∞—Ä–∏–Ω—É':
				$keyboard = vk_keyboard(false, array(array(vk_text_button("–ö–∞—Ä–∏–Ω–∞", array('command'=>'fun','meme_id'=>7), "positive")), array(vk_text_button("–£–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É", array('command'=>'fun','meme_id'=>-1), "negative"))));
				$json_request = json_encode(array('peer_id' => $data->object->peer_id, 'message' => '–†–µ–∂–∏–º "–î—Ä–æ—á–∏—Ç—å –Ω–∞ –ö–∞—Ä–∏–Ω—É" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –Ω–∞–ø–∏—à–∏—Ç–µ –£–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.', 'keyboard' => $keyboard), JSON_UNESCAPED_UNICODE);
				vk_execute("API.messages.send({$json_request});");
				break;

				case '–¥—Ä–æ—á–∏—Ç—å –Ω–∞ –∞–º–∏–Ω—É':
				$keyboard = vk_keyboard(false, array(array(vk_text_button("–ê–º–∏–Ω–∞", array('command'=>'fun','meme_id'=>8), "positive")), array(vk_text_button("–£–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É", array('command'=>'fun','meme_id'=>-1), "negative"))));
				$json_request = json_encode(array('peer_id' => $data->object->peer_id, 'message' => '–†–µ–∂–∏–º "–î—Ä–æ—á–∏—Ç—å –Ω–∞ –ê–º–∏–Ω—É" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –Ω–∞–ø–∏—à–∏—Ç–µ –£–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.', 'keyboard' => $keyboard), JSON_UNESCAPED_UNICODE);
				vk_execute("API.messages.send({$json_request});");
				break;

				case '–æ—Ñ—Ñ–Ω–∏–∫–∏':
				$keyboard = vk_keyboard(true, array(array(vk_text_button("–£–±—Ä–∞—Ç—å –æ—Ñ—Ñ–Ω–∏–∫–æ–≤", array('command'=>'fun','meme_id'=>9), 'positive'))));
				$json_request = json_encode(array('peer_id' => $data->object->peer_id, 'message' => 'üñïüèª', 'keyboard' => $keyboard), JSON_UNESCAPED_UNICODE);
				vk_execute("API.messages.send({$json_request});");
				break;

				case '–ø–∞—à–µ–ª –Ω–∞—Ö—É–π':
				$botModule->sendSilentMessage($data->object->peer_id, "–°–∞–º –∏–¥–∏ –Ω–∞—Ö—É–π!");
				break;

				case '–ª–æ—Ö–∏ –±–µ—Å–µ–¥—ã':
				vk_execute($botModule->makeExeAppealByID($data->object->from_id)."
					var members = API.messages.getConversationMembers({'peer_id':{$data->object->peer_id}}).profiles;
					var msg = appeal+', —Å–ø–∏—Å–æ–∫ –ª–æ—Ö–æ–≤ –±–µ—Å–µ–¥—ã:';

					var i = 0; while(i < members.length){
						if(members[i].id > 300000000){
							msg = msg + '\\n‚úÖ@id'+members[i].id+' ('+members[i].first_name+' '+members[i].last_name+') - id'+members[i].id;
						}
						i = i + 1;
					}

					return API.messages.send({'peer_id':{$data->object->peer_id},'message':msg});
					");
				break;

				case '–¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏':
				$user_info = simplexml_load_file("https://vk.com/foaf.php?id={$data->object->from_id}");
				$created_date_unformed = $user_info->xpath('//ya:created/@dc:date')[0];
				unset($user_info);
				$formating = explode("T", $created_date_unformed);
				$date = $formating[0];
				$time = $formating[1];
				$formating = explode("-", $date);
				$date = "{$formating[2]}.{$formating[1]}.{$formating[0]}";
				$msg = ", –í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±—ã–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ {$date}.";
				$botModule->sendSilentMessage($data->object->peer_id, $msg, $data->object->from_id);
				break;

				case 'memory_get_usage':
				$botModule->sendSilentMessage($data->object->peer_id, ", Memory Used: ".memory_get_usage()." B.", $data->object->from_id);
				break;

				case 'memory_get_usage_real':
				$botModule->sendSilentMessage($data->object->peer_id, ", Memory Used: ".memory_get_usage(true)." B.", $data->object->from_id);
				break;
			}

			return true;
		}

		public static function payloadHandler($data, &$db){
			if(property_exists($data->object, 'payload')){
				$payload = json_decode($data->object->payload);
				if($payload->command == "fun"){
					$botModule = new \BotModule($db);
					switch ($payload->meme_id) {
						case -1:
						$keyboard = vk_keyboard(false, array());
						$json_request = json_encode(array('peer_id' => $data->object->peer_id, 'message' => '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±—Ä–∞–Ω–∞.', 'keyboard' => $keyboard), JSON_UNESCAPED_UNICODE);
						vk_execute("return API.messages.send({$json_request});");
						break;

						case 1:
						$msg = ", –¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–∂–∞–ª'+a_char+' —Å–∞–º—É—é @id317258850 (–æ—Ö—É–µ–Ω–Ω—É—é) –∫–Ω–æ–ø–∫—É –≤ –º–∏—Ä–µ.‚ù§üñ§üíôüíöüíõüíñ";
						vk_execute($botModule->makeExeAppealByID($data->object->from_id)."
							var user = API.users.get({'user_ids':[{$data->object->from_id}],'fields':'sex'})[0];
							var a_char = '';
							if(user.sex == 1){
								a_char = '–∞';
							}
							return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+'{$msg}','attachment':'photo-161901831_456239030'});");
						break;

						case 2:
						if($payload->act == 1){
							$random_number = mt_rand(0, 65535);
							vk_execute("
								var members = API.messages.getConversationMembers({'peer_id':{$data->object->peer_id},'fields':'first_name_gen,last_name_gen,sex'});
								var members_count = members.profiles.length;
								var rand_index = {$random_number} % members_count;
								var napkin = {$payload->napkin};

								var from_id = {$data->object->from_id};
								var from_id_index = -1;
								var i = 0; while (i < members.items.length){
								if(members.profiles[i].id == from_id){
								from_id_index = i;
								i = members.profiles.length;
								}
								i = i + 1;
								};

								var a_char = '';
								if(members.profiles[from_id_index].sex == 1){
									a_char = '–∞';
								}

								var msg = '';

								if(napkin == 0){
									msg = '@id'+from_id+' ('+members.profiles[from_id_index].first_name+' '+members.profiles[from_id_index].last_name+') –ø–æ–¥—Ä–æ—á–∏–ª'+a_char+' –∏ –±—ã–ª'+a_char+' —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω'+a_char+' –Ω–∞—Å—Ç–æ–ª—å–∫–æ, —á—Ç–æ –∞–∂ –∫–æ–Ω—á–∏–ª'+a_char+' –Ω–∞ –ª–∏—Ü–æ @id'+members.profiles[rand_index].id+' ('+members.profiles[rand_index].first_name_gen+' '+members.profiles[rand_index].last_name_gen+').';
								} else {
									msg = '@id'+from_id+' ('+members.profiles[from_id_index].first_name+' '+members.profiles[from_id_index].last_name+') –ø–æ–¥—Ä–æ—á–∏–ª'+a_char+' –∏ –±—ã–ª'+a_char+' —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω'+a_char+' –Ω–∞—Å—Ç–æ–ª—å–∫–æ, —á—Ç–æ –∞–∂ –∫–æ–Ω—á–∏–ª'+a_char+' –Ω–∞ —Å–∞–ª—Ñ–µ—Ç–∫—É.';
								}

								return API.messages.send({'peer_id':{$data->object->peer_id},'message':msg});");
						} else {
							$keyboard = vk_keyboard(true, array(array(vk_text_button("–î—Ä–æ—á–∏—Ç—å", array('command'=>'fun','meme_id'=>2,'act'=>1,'napkin'=>1), "primary"))));
							$json_request = json_encode(array('peer_id' => $data->object->peer_id, 'message' => '%appeal%, –Ω–∞, –¥–µ—Ä–∂–∏ —Å–∞–ª—Ñ–µ—Ç–æ—á–∫—É!', 'keyboard' => $keyboard), JSON_UNESCAPED_UNICODE);
							$json_request = vk_parse_var($json_request, "appeal");
							vk_execute($botModule->makeExeAppealByID($data->object->from_id)."API.messages.send({$json_request});");
						}
						break;

						case 3:
						if($payload->selected == 1){
							vk_execute($botModule->makeExeAppealByID($data->object->from_id)."
							var peer_id = {$data->object->peer_id};
							var from_id = {$data->object->from_id};
							var msg = ', –ö–∏—Ä–∏–ª–ª? –ù—É –∏ —Ö–æ—Ä–æ—à–æ!';
							API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+msg});
							return 0;
							");
						} else {
							vk_execute($botModule->makeExeAppealByID($data->object->from_id)."
							var peer_id = {$data->object->peer_id};
							var from_id = {$data->object->from_id};
							var msg = ', –ß—Ç–æ? –ö–µ—Ä–∏–ª? –ë–∞–Ω, –Ω–∞—Ö–æ–π!';
							API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+msg});
							API.messages.removeChatUser({'chat_id':peer_id-2000000000,'member_id':from_id});
							return 0;
							");
						}
						break;

						case 4:
						$id = "@id243123791";

						$base = array(
							", –≤—ã –ø–æ–≥–ª–∞–¥–∏–ª–∏ {$id} (–ê–ª–µ—á–∫—Éüò∫). –ï–π –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.üòªüòªüòª",
							", –≤—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ {$id} (–ê–ª–µ—á–∫—Éüò∫). –¢–µ–ø–µ—Ä—å –æ–Ω–∞ —Å—ã—Ç–∞—è –∏ —Å—á–∞—Å—Ç–ª–∏–≤–∞—è.üòªüòªüòª",
							", –≤—ã –ø–æ–∏–≥—Ä–∞–ª–∏ —Å {$id} (–ê–ª–µ—á–∫–æ–πüò∫). –û–Ω–∞ —Å—á–∞—Å—Ç–ª–∏–≤–æ –º—è—É–∫–∞–µ—Ç!üò∏üò∏üò∏",
							", –≤—ã —Ä–∞—Å—á–µ—Å–∞–ª–∏ {$id} (–ê–ª–µ—á–∫—Éüò∫). –¢–µ–ø–µ—Ä—å –æ–Ω–∞ –µ—â–µ –±–æ–ª—å—à–µ –∫—Ä–∞—Å–∏–≤–∞!",
							", –≤—ã –ø–æ–≥—É–ª—è–ª–∏ —Å {$id} (–ê–ª–µ—á–∫–æ–πüò∫). –ù–∞ —É–ª–∏—Ü–µ, –æ–Ω–∞ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∞ –∫–æ—Ç–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –≤–ª—é–±–∏–ª–∞—Å—å –≤ –Ω–µ–≥–æ.üòªüòªüòª",
							", –≤—ã –∫—É–ø–∏–ª–∏ –Ω–æ–≤—ã–π –∫–æ–º–±–∏–Ω–∏–∑–æ–Ω—á–∏–∫ –¥–ª—è {$id} (–ê–ª–µ—á–∫–∏üò∫). –û–Ω –æ—á–µ–Ω—å —É–¥–æ–±–Ω—ã–π, –µ–π –Ω—Ä–∞–≤–∏—Ç—Å—è.üòΩüòΩüòΩ",
							", {$id} (–ê–ª–µ—á–∫–∞üò∫) —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∞ –≤ —Ç–µ–±–µ. –û–Ω–∞ –¥—É–º–∞–ª–∞, —Ç—ã –µ–µ –ª—é–±–∏—à—å, –∞ —Ç—ã...üôÄüôÄüôÄ",
							", –≤—ã —É–±—Ä–∞–ª–∏ –≥–æ–≤–Ω–æ {$id} (–ê–ª–µ—á–∫–∏üò∫). –¢–µ–ø–µ—Ä—å –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ –Ω–µ –≤–æ–Ω—è–µ—Ç –∫–æ—à–∞—á—å–∏–º –¥–µ—Ä—å–º–æ–º.ü§£ü§£ü§£"
						);

						$msg = $base[$payload->act-1];

						vk_execute($botModule->makeExeAppealByID($data->object->from_id)."
							return API.messages.send({'peer_id':{$data->object->peer_id},'message':appeal+'{$msg}'});
							");
						break;

						case 5:
						$fun = fun_db_get($db);
						switch ($payload->act) {
							case 2:
							$msg = "";
							if($fun["luba"]["isSleeping"]){
								$msg = ", –≤—ã —Ä–∞–∑–±—É–¥–∏–ª–∏ @id317258850 (–õ—é–±—É).üòò";
							} else {
								$msg = ", –≤—ã —É–ª–æ–∂–∏–ª–∏ @id317258850 (–õ—é–±—É) —Å–ø–∞—Ç—å.üò¥";
							}
							$fun["luba"]["isSleeping"] = !$fun["luba"]["isSleeping"];
							fun_luba_menu($data, $fun, $msg, $botModule);
							break;

							case 0:
							if($fun["luba"]["hungry"] <= 80){
								$fun["luba"]["hungry"] = 100;
								fun_luba_menu($data, $fun, ", –≤—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ @id317258850 (–õ—é–±—É).üò∏", $botModule);
							} else {
								fun_luba_menu($data, $fun, ", @id317258850 (–õ—é–±–∞) –Ω–µ —Ö–æ—á–µ—Ç –∫—É—à–∞—Ç—å.üôÑ", $botModule);
							}
							break;

							case 1:
							if($fun["luba"]["thirst"] <= 80){
								$fun["luba"]["thirst"] = 100;
								fun_luba_menu($data, $fun, ", –≤—ã –¥–∞–ª–∏ –ø–æ–ø–∏—Ç—å @id317258850 (–õ—é–±–µ).üò∏", $botModule);
							} else {
								fun_luba_menu($data, $fun, ", @id317258850 (–õ—é–±–∞) –Ω–µ —Ö–æ—á–µ—Ç –ø–∏—Ç—å.üôÑ", $botModule);
							}
							break;

							case 4:
							if($fun["luba"]["hungry"] < 20){
								fun_luba_menu($data, $fun, ", @id317258850 (–õ—é–±–∞) —Ö–æ—á–µ—Ç –∫—É—à–∞—Ç—å.ü•∫ –ü–æ–∫–æ—Ä–º–∏—Ç–µ –µ—ë!", $botModule);
								break;
							} elseif($fun["luba"]["thirst"] < 20){
								fun_luba_menu($data, $fun, ", @id317258850 (–õ—é–±–∞) —Ö–æ—á–µ—Ç –ø–∏—Ç—å.ü•∫ –ü–æ–º–æ–≥–∏—Ç–µ –µ–π!", $botModule);
								break;
							} elseif($fun["luba"]["cheerfulness"] < 20){
								fun_luba_menu($data, $fun, ", @id317258850 (–õ—é–±–∞) —Ö–æ—á–µ—Ç —Å–ø–∞—Ç—å. –£–ª–æ–∂–∏—Ç–µ –µ–µ –≤ –∫—Ä–æ–≤–∞—Ç–∫—É.üò¥", $botModule);
								break;
							} elseif($fun["luba"]["happiness"] > 50){
								fun_luba_menu($data, $fun, ", @id317258850 (–õ—é–±–∞) –Ω–µ —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å.üôÑ", $botModule);
								break;
							}
								$fun["luba"]["happiness"] += 50;
								$fun["luba"]["hungry"] -= 10;
								$fun["luba"]["thirst"] -= 10;
								$fun["luba"]["cheerfulness"] -= 15;
								fun_luba_menu($data, $fun, ", –≤—ã –ø–æ–∏–≥—Ä–∞–ª–∏ —Å @id317258850 (–õ—é–±–æ–π).ü§ó", $botModule);
							break;

							case 5:
							if($fun["luba"]["hungry"] < 20){
								fun_luba_menu($data, $fun, ", @id317258850 (–õ—é–±–∞) —Ö–æ—á–µ—Ç –∫—É—à–∞—Ç—å.ü•∫ –ü–æ–∫–æ—Ä–º–∏—Ç–µ –µ—ë!", $botModule);
								break;
							} elseif($fun["luba"]["thirst"] < 20){
								fun_luba_menu($data, $fun, ", @id317258850 (–õ—é–±–∞) —Ö–æ—á–µ—Ç –ø–∏—Ç—å.ü•∫ –ü–æ–º–æ–≥–∏—Ç–µ –µ–π!", $botModule);
								break;
							} elseif($fun["luba"]["cheerfulness"] < 20){
								fun_luba_menu($data, $fun, ", @id317258850 (–õ—é–±–∞) —Ö–æ—á–µ—Ç —Å–ø–∞—Ç—å. –£–ª–æ–∂–∏—Ç–µ –µ–µ –≤ –∫—Ä–æ–≤–∞—Ç–∫—É.üò¥", $botModule);
								break;
							} elseif($fun["luba"]["happiness"] > 80){
								fun_luba_menu($data, $fun, ", @id317258850 (–õ—é–±–∞) –Ω–µ —Ö–æ—á–µ—Ç, —á—Ç–æ–±—ã –µ—ë –≥–ª–∞–¥–∏–ª–∏.üôÑ", $botModule);
								break;
							}
							$fun["luba"]["happiness"] += 20;
							fun_luba_menu($data, $fun, ", –≤—ã –ø–æ–≥–ª–∞–¥–∏–ª–∏ @id317258850 (–õ—é–±—É).ü§ó", $botModule);
							break;
						}
						fun_db_set($db, $fun);
						break;

						case 6:
						fun_stockings($data, $db);
						break;

						case 7:
						fun_karina($data, $db);
						break;

						case 8:
						fun_amina($data, $db);
						break;

						case 9:
						$photos = array("photo219011658_457244124", "photo219011658_457244126", "photo219011658_457244128");
						$i = mt_rand(0, 65535) % count($photos);
						$json_request = json_encode(array('peer_id' => $data->object->peer_id, 'attachment' => $photos[$i]), JSON_UNESCAPED_UNICODE);
						vk_execute("API.messages.send({$json_request});");
						break;

						case 10:
						$botModule->sendSilentMessage($data->object->peer_id, "@id477530202 (–°–∞–º–∞—è –æ—Ñ–∏–≥–µ–Ω–Ω–∞—è!)", null, array('attachment' => 'photo477530202_457244949,photo219011658_457244383'));
						break;
					}
				}
			}
		}
	}

	function imgoingsleeping($data, $db, $text){
		$chatModes = new \ChatModes($db);
		if(!$chatModes->getModeValue("legacy_enabled"))
			return;

		if(mb_substr_count($text, "—è —Å–ø–∞—Ç—å") > 0){
		$arr = array(
			array('m' => '–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, %user_id% (–±—Ä–∞—Ç)üòé.', 'f' => 'üòã–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, %user_id% (–¥–æ—Ä–æ–≥–∞—è)‚ù§.'),
			array('m' => '–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, %user_id% (–±—Ä–∞—Ç)üòé.', 'f' => 'üò¥–°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤, %user_id% (–∫—Ä–∞—Å–æ—Ç–∫–∞)üòç.'),
			array('m' => '–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, %user_id% (–±—Ä–∞—Ç)üòé.', 'f' => '‚ò∫–ñ–µ–ª–∞—é —Ç–µ–±–µ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö —Å–Ω–æ–≤! –¢—ã %user_id% (–ª—É—á—à–∞—è)üòç, –ª—é–±–ª—éüíû.'),
			array('m' => '–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, %user_id% (–±—Ä–∞—Ç)üòé.', 'f' => '‚ò∫–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, %user_id% (–º–æ—è –ª—é–±–∏–º–∞—è –¥–µ–≤–æ—á–∫–∞)üòò.')
		);
		$botModule = new \BotModule($db);
		$curr = $arr[mt_rand(0, 65535) % count($arr)];
		$curr_json = json_encode($curr, JSON_UNESCAPED_UNICODE);
		$curr_json = vk_parse_vars($curr_json, array("appeal", "user_id"));
		vk_execute("
			var user = API.users.get({'user_ids':[{$data->object->from_id}],'fields':'sex'})[0];
			var user_id = '@id'+user.id;
			var curr = {$curr_json};
			var msg = '';
			if(user.sex == 1){
				msg = curr.f;
			}
			else{
				msg = curr.m;
			}
			API.messages.send({'peer_id':{$data->object->peer_id},'message':msg,'disable_mentions':true});
			");
		}
	}
}

?>