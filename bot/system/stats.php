<?php

////////////////////////////////////////////////////////////////////////////////////////////////////
// Stats API

class StatsManager{
	private $db;
	private $last_message_user_id;
	private $updateObject;
	private $updateStats;
	private $current_day;

	const STATS_DEFAULT = [
		// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
		'msg_count' => 0,
		'msg_count_in_succession' => 0,
		'simbol_count' => 0,
		'audio_msg_count' => 0,
		'photo_count' => 0,
		'audio_count' => 0,
		'video_count' => 0,
		'sticker_count' => 0,
		// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥
		'command_used_count' => 0,
		'button_pressed_count' => 0,
		// –†–ü —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
		'bump_count' => 0,
		//'pee_count' => 0,
		//'crap_count' => 0,
		//'hark_count' => 0,
		//'gofuck_count' => 0,
		//'puckingup_count' => 0,
		//'castrate_count' => 0
	];

	function __construct(Database\Manager $db){
		$this->db = $db;
		$this->updateObject = [];

		$time = time();
		$this->current_day = $time - ($time % 86400);

		$query = new MongoDB\Driver\Query(['_id' => $this->db->getDocumentID()], ['projection' => ["_id" => 0, 'chat_stats.last_message_user_id' => 1, 'chat_stats.last_daily_time' => 1]]);
		$extractor = $db->executeQuery($query);
	  	$this->last_message_user_id = $extractor->getValue("0.chat_stats.last_message_user_id", 0);
	  	$last_daily_time = $extractor->getValue("0.chat_stats.last_daily_time", 0);

	  	if($time - $last_daily_time >= 86400){
			$this->updateObject['$set']['chat_stats.last_daily_time'] = $this->current_day;
			if($last_daily_time > 0)
				$this->updateObject['$unset']["chat_stats.users_daily.time{$last_daily_time}"] = 0;
		}
	}

	public function getLastMessageUserID(){
		return $this->last_message_user_id;
	}

	public function update(string $stat_name, int $inc_number){
		if($stat_name == "" || $inc_number == 0)
			return false;

		$this->updateStats[$stat_name] = $inc_number;
		return true;
	}

	public function commit(int $user_id){
		if($user_id <= 0)
			return false;

		foreach (self::STATS_DEFAULT as $key => $value){
			if(array_key_exists($key, $this->updateStats)){
				$this->updateObject['$inc']["chat_stats.users.id{$user_id}.{$key}"] = $this->updateStats[$key];
				$this->updateObject['$inc']["chat_stats.users_daily.time{$this->current_day}.id{$user_id}.{$key}"] = $this->updateStats[$key];
			}
			else{
				$this->updateObject['$inc']["chat_stats.users.id{$user_id}.{$key}"] = 0;
				$this->updateObject['$inc']["chat_stats.users_daily.time{$this->current_day}.id{$user_id}.{$key}"] = 0;
			}
		}
		if($user_id != $this->last_message_user_id)
			$this->updateObject['$set']['chat_stats.last_message_user_id'] = $user_id;

		$bulk = new MongoDB\Driver\BulkWrite;
		$bulk->update(['_id' => $this->db->getDocumentID()], $this->updateObject);
		$this->db->executeBulkWrite($bulk);
		return true;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
function stats_initcmd($event){
	$event->addTextMessageCommand("!—Å—Ç–∞—Ç–∞", 'stats_cmd_handler');
	$event->addTextMessageCommand("!—Ä–µ–π—Ç–∏–Ω–≥", 'stats_rating_cmd_handler');
}

function stats_update_messageevent($event, $data, $db){
	if(property_exists($data->object, "payload") && gettype($data->object->payload) == 'array' && array_key_exists(0, $data->object->payload) && $event->isCallbackButtonCommand($data->object->payload[0])){
		$statsManager = new StatsManager($db);
		$statsManager->update("button_pressed_count", 1);
		$statsManager->commit($data->object->user_id);
	}
}

function stats_update_messagenew($event, $data, $db){
	// –ó–∞–ø—Ä–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤
	if($data->object->from_id < 0)
		return;

	$time = time();

	$statsManager = new StatsManager($db);

	$stats = [];
	if($statsManager->getLastMessageUserID() == $data->object->from_id)
		$stats["msg_count_in_succession"] = 1;

	$stats["msg_count"] = 1; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
	$stats["simbol_count"] = mb_strlen($data->object->text);

	foreach ($data->object->attachments as $attachment) {
		switch ($attachment->type) {
			case 'sticker':
				$stats["sticker_count"] = 1;
				break;

			case 'photo':
				$stats["photo_count"] = 1;
				break;

			case 'video':
				$stats["video_count"] = 1;
				break;

			case 'audio_message':
				$stats["audio_msg_count"] = 1;
				break;

			case 'audio':
				$stats["audio_count"] = 1;
				break;
		}
	}

	if(property_exists($data->object, "payload")){
		$payload = (object) json_decode($data->object->payload);
		if(property_exists($payload, "command") && $event->isTextButtonCommand($payload->command))
			$stats['button_pressed_count'] = 1;
	}
	else{
		$argv = bot_parse_argv($data->object->text); // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
		if(array_key_exists(0, $argv) && $event->isTextMessageCommand($argv[0])){
			$stats["command_used_count"] = 1;
		}
	}

	foreach ($stats as $key => $value) {
		$statsManager->update($key, $value);
	}

	$statsManager->commit($data->object->from_id);
}

function stats_cmd_handler($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$argv = $finput->argv;
	$db = $finput->db;

	$messagesModule = new Bot\Messages($db);
	$messagesModule->setAppealID($data->object->from_id);

	$command = mb_strtolower(bot_get_array_value($argv, 1, ""));

	if($command == "" || $command == '–¥–Ω—è'){
		if(array_key_exists(0, $data->object->fwd_messages))
			$member_id = $data->object->fwd_messages[0]->from_id;
		else $member_id = $data->object->from_id;

		if($member_id <= 0){
			$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ.");
			return;
		}

		if($command == ''){
			$query = new MongoDB\Driver\Query(['_id' => $db->getDocumentID()], ['projection' => ["_id" => 0, 'chat_stats.users' => 1]]);
		 	$extractor = $db->executeQuery($query);
		  	$all_stats = Database\CursorValueExtractor::objectToArray($extractor->getValue("0.chat_stats.users", []));
		  	$stats = Database\CursorValueExtractor::objectToArray($extractor->getValue("0.chat_stats.users.id{$member_id}", StatsManager::STATS_DEFAULT));

		  	if($data->object->from_id == $member_id)
				$pre_msg = "%appeal%, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:";
			else
				$pre_msg = "%appeal%, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @id{$member_id} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):";
		}
		else{
			$time = time();									// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
			$current_day = $time - ($time % 86400);			// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã (00:00 GMT)

			$query = new MongoDB\Driver\Query(['_id' => $db->getDocumentID()], ['projection' => ["_id" => 0, "chat_stats.users_daily.time{$current_day}" => 1]]);
		 	$extractor = $db->executeQuery($query);
		  	$all_stats = Database\CursorValueExtractor::objectToArray($extractor->getValue("0.chat_stats.users_daily.time{$current_day}", []));
		  	$stats = Database\CursorValueExtractor::objectToArray($extractor->getValue("0.chat_stats.users_daily.time{$current_day}.id{$member_id}", StatsManager::STATS_DEFAULT));

		  	if($data->object->from_id == $member_id)
				$pre_msg = "%appeal%, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è:";
			else
				$pre_msg = "%appeal%, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è @id{$member_id} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):";
		}

		$rating = array();
		foreach ($all_stats as $key => $value){
			$user = array_merge(StatsManager::STATS_DEFAULT, $value);
			$rating[$key] = $user["msg_count"] - $user["msg_count_in_succession"];
		}
		arsort($rating);
		$position = array_search("id{$member_id}", array_keys($rating));
		if($position !== false){
			$position++;
			$rating_text = "{$position} –º–µ—Å—Ç–æ";
		}
		else
			$rating_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";

		$basic_info = "\nüìß–°–æ–æ–±—â–µ–Ω–∏–π: {$stats["msg_count"]}\n&#12288;üìù–ü–æ–¥—Ä—è–¥: {$stats["msg_count_in_succession"]}\nüîç–°–∏–º–≤–æ–ª–æ–≤: {$stats["simbol_count"]}\nüìü–ì–æ–ª. —Å–æ–æ–±—â–µ–Ω–∏–π: {$stats["audio_msg_count"]}";
		$attachment_info = "\n\nüì∑–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {$stats["photo_count"]}\nüìπ–í–∏–¥–µ–æ: {$stats["video_count"]}\nüéß–ê—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π: {$stats["audio_count"]}\nü§°–°—Ç–∏–∫–µ—Ä–æ–≤: {$stats["sticker_count"]}";
		$cmd_info = "\n\nüõ†–ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {$stats["command_used_count"]}\nüîò–ù–∞–∂–∞—Ç–æ –∫–Ω–æ–ø–æ–∫: {$stats["button_pressed_count"]}";
		$rp_info = "\n\nüó£–†–ü:\n&#12288;üëäüèª–£–¥–∞—Ä–µ–Ω: {$stats["bump_count"]}";
		//$rp_info = "\n\nüó£–†–ü:\n&#12288;üëäüèª–£–¥–∞—Ä–µ–Ω: {$stats["bump_count"]}\n&#12288;üí¶–û–±–æ—Å—Å–∞–Ω: {$stats["pee_count"]}\n&#12288;üí©–û–±–æ—Å—Ä–∞–Ω: {$stats["crap_count"]}\n&#12288;ü§Æ–û–±—Ö–∞—Ä–∫–∞–Ω: {$stats["hark_count"]}\n&#12288;üò°–ü–æ—Å–ª–∞–Ω: {$stats["gofuck_count"]}\n&#12288;ü§¢–û–±–ª—ë–≤–∞–Ω: {$stats["puckingup_count"]}\n&#12288;üôä–ö–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {$stats["castrate_count"]}";
		$rating_info = "\n\nüëë–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {$rating_text}";
		$messagesModule->sendSilentMessage($data->object->peer_id, "{$pre_msg}{$basic_info}{$attachment_info}{$cmd_info}{$rp_info}{$rating_info}");
	}
	else{
		$messagesModule->sendSilentMessageWithListFromArray($data->object->peer_id, "%appeal%, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:", array(
			'!c—Ç–∞—Ç–∞ - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è',
			'!—Å—Ç–∞—Ç–∞ –¥–Ω—è - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å',
			'!c—Ç–∞—Ç–∞ <–ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è',
			'!—Å—Ç–∞—Ç–∞ –¥–Ω—è <–ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –¥–µ–Ω—å'
		));
	}
}

function stats_rating_cmd_handler($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$argv = $finput->argv;
	$db = $finput->db;

	$messagesModule = new Bot\Messages($db);
	$messagesModule->setAppealID($data->object->from_id);

	$arg1 = bot_get_array_value($argv, 1, 1);
	if(is_numeric($arg1)){
		$list_number = intval($arg1);
		$day_word = "";

		$query = new MongoDB\Driver\Query(['_id' => $db->getDocumentID()], ['projection' => ["_id" => 0, 'chat_stats.users' => 1]]);
	 	$extractor = $db->executeQuery($query);
	  	$all_stats = Database\CursorValueExtractor::objectToArray($extractor->getValue("0.chat_stats.users", []));
	}
	else{
		$command = mb_strtolower($arg1);
		if($command == '–¥–Ω—è'){
			$list_number = intval(bot_get_array_value($argv, 2, 1));
			$day_word = ' –¥–Ω—è';

			$time = time();									// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
			$current_day = $time - ($time % 86400);			// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã (00:00 GMT)

			$query = new MongoDB\Driver\Query(['_id' => $db->getDocumentID()], ['projection' => ["_id" => 0, "chat_stats.users_daily.time{$current_day}" => 1]]);
		 	$extractor = $db->executeQuery($query);
		  	$all_stats = Database\CursorValueExtractor::objectToArray($extractor->getValue("0.chat_stats.users_daily.time{$current_day}", []));
		}
		else{
			$messagesModule->sendSilentMessageWithListFromArray($data->object->peer_id, "%appeal%, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:", array(
				'!—Ä–µ–π—Ç–∏–Ω–≥ <–ª–∏—Å—Ç> - –†–µ–π—Ç–∏–Ω–≥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è',
				'!—Ä–µ–π—Ç–∏–Ω–≥ –¥–Ω—è <–ª–∏—Å—Ç> - –†–µ–π—Ç–∏–Ω–≥ –∑–∞ –¥–µ–Ω—å'
			));
			return;
		}
	}

	if(count($all_stats) == 0){
		$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞.");
		return;
	}

	$rating = [];
	foreach ($all_stats as $key => $value) {
		$rating[$key] = $value["msg_count"] - $value["msg_count_in_succession"];
	}
	arsort($rating);

	$rating_list = [];
	foreach ($rating as $key => $value) {
		$rating_list[] = [
			'u' => intval(mb_substr($key, 2)),
			'r' => $value
		];
	}

	$list_size = 20;
	$listBuilder = new Bot\ListBuilder($rating_list, $list_size);
	$builded_list = $listBuilder->build($list_number);
	$vkjson = json_encode($builded_list->list->out, JSON_UNESCAPED_UNICODE);
	if($builded_list->result){
		vk_execute($messagesModule->buildVKSciptAppealByID($data->object->from_id)."var rating={$vkjson};var users=API.users.get({user_ids:rating@.u});var msg=appeal+', –†–µ–π—Ç–∏–Ω–≥{$day_word} [{$builded_list->list->number}/{$builded_list->list->max_number}]:';var i=0;while(i<rating.length){var n=i+1+({$builded_list->list->number}-1)*{$list_size};var sign='üë§';if(n<=3){sign='üëë';}msg=msg+'\\n'+n+'. '+sign+'@id'+users[i].id+' ('+users[i].first_name.substr(0, 2)+'. '+users[i].last_name+')';i=i+1;}API.messages.send({peer_id:{$data->object->peer_id},message:msg,disable_mentions:true});");
	}
	else
		$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫.");
}

?>