<?php

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
function government_initcmd($event){
	// –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ
	$event->addTextMessageCommand("!–∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è", 'government_constitution');
	$event->addTextMessageCommand("!–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç", 'government_president');
	$event->addTextMessageCommand("!–∑–∞–∫–æ–Ω—ã", 'government_show_laws');
	$event->addTextMessageCommand("!–∑–∞–∫–æ–Ω", 'government_laws_cpanel');
	$event->addTextMessageCommand("!–ø–∞—Ä—Ç–∏—è", 'government_batch');
	//$event->addTextMessageCommand("!—Å—Ç–æ–ª–∏—Ü–∞", 'government_capital');
	$event->addTextMessageCommand("!–≥–∏–º–Ω", 'government_anthem');
	//$event->addTextMessageCommand("!—Ñ–ª–∞–≥", 'government_flag');
	//$event->addTextMessageCommand("!–º–∏—Ç–∏–Ω–≥", 'government_rally');

	// –°–∏—Å—Ç–µ–º–∞ –≤—ã–±–æ—Ä–æ–≤
	$event->addTextMessageCommand("!–≤—ã–±–æ—Ä—ã", 'government_election_start');
	$event->addTextMessageCommand("!–±–∞–ª–ª–æ—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è", 'government_election_candidate');
	$event->addTextMessageCommand("!–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å", 'government_election_vote');

	// Callback-–∫–Ω–æ–ø–∫–∏
	$event->addCallbackButtonCommand('government_batch', 'government_batch_cb');
	$event->addCallbackButtonCommand('government_vote', 'government_election_vote_cb');
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Data

class Goverment{ // –ö–ª–∞—Å—Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º–∏ –¥–ª—è –º–æ–¥—É–ª—è government

	// 'ID_–∏–¥–µ–æ–ª–æ–≥–∏–∏' => ['name' => '–ù–∞–∑–≤–∞–Ω–∏–µ_–∏–¥–µ–æ–ª–æ–≥–∏–∏', 'gov' => –¢–ò–ü_–ü–†–ê–í–ò–¢–ï–õ–¨–°–¢–í–ê]
	// –¢–∏–ø—ã –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤: 0 - –î–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ, 1 - –ê–≤—Ç–æ—Ä–∏—Ç–∞—Ä–∏—Ç–∞—Ä–Ω–æ–µ, 2 - –¢–æ—Ç–∞–ª—å—Ç–∞—Ä–Ω–æ–µ
	const IDEOLOGY = [
		'liberalism' => ['name' => '–õ–∏–±–µ—Ä–∞–ª–∏–∑–º', 'gov' => 0],
		'socialism' => ['name' => '–°–æ—Ü–∏–∞–ª–∏–∑–º', 'gov' => 0], 
		'monarchism' => ['name' => '–ú–æ–Ω–∞—Ä—Ö–∏–∑–º', 'gov' => 1],
		'anarchism' => ['name' => '–ê–Ω–∞—Ä—Ö–∏–∑–º', 'gov' => 1],
		'communism' => ['name' => '–ö–æ–º–º—É–Ω–∏–∑–º', 'gov' => 2],
		'fascism' => ['name' => '–§–∞—à–∏–∑–º', 'gov' => 2]

	];
	const GOV_TYPES = ['–î–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ', '–ê–≤—Ç–æ—Ä–∏—Ç–∞—Ä–∏—Ç–∞—Ä–Ω–æ–µ', '–¢–æ—Ç–∞–ª—å—Ç–∞—Ä–Ω–æ–µ'];
	const TERM_DURATION = 604800;
	const ELECTION_DURATION = 21600;

	public static function getIdeologyNameByID($id){
		if(array_key_exists($id, self::IDEOLOGY))
			return self::IDEOLOGY[$id];
		else
			return null;
	}

	public static function getIdeologyIDByName($name){
		$name = mb_strtolower($name);
		foreach (self::IDEOLOGY as $key => $value) {
			if(mb_strtolower($value['name']) == $name)
				return $key;
		}
		return null;
	}

	public static function getPresidentID($gov){
		if(!is_null($gov['ruling_batch']['id']) && array_key_exists($gov['ruling_batch']['id'], $gov['batches']))
			return $gov['batches'][$gov['ruling_batch']['id']]['leader_id'];
		return 0;
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Goverment API

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function government_api_getdata($db){
	// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥–æ—Å. –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	$DB_GOVERNMENT_DEFAULT = [
		'batches' => [],
		'ruling_batch' => [
			'id' => null,
			'legitimacy' => 0,
			'terms_count' => 0,
			'elected_time' => 0
		],
		'laws' => [],
		'anthem' => "null",
		'flag' => "null",
		'capital' => null,
		'rally' => false,
		'election' => false
	];

	$query = new MongoDB\Driver\Query(['_id' => $db->getID()], ['projection' => ["_id" => 0, 'government' => 1]]);
	$cursor = $db->getMongoDB()->executeQuery("{$db->getDatabaseName()}.chats", $query);
	$extractor = new Database\CursorValueExtractor($cursor);
	$db_data = Database\CursorValueExtractor::objectToArray($extractor->getValue("0.government", []));
	return array_merge($DB_GOVERNMENT_DEFAULT, $db_data);
	/*
	$data = array();
	foreach ($DB_GOVERNMENT_DEFAULT as $key => $value) {
		if(array_key_exists($key, $db_data))
			$data[$key] = $db_data[$key];
		else
			$data[$key] = $value;
	}
	return $data;
	*/
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Handlers

function government_constitution($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$argv = $finput->argv;
	$db = $finput->db;

	$messagesModule = new Bot\Messages($db);
	$gov = government_api_getdata($db);

	$president_id = Goverment::getPresidentID($gov);

	if($president_id != 0){
		$ruling_batch_data = $gov['batches'][$gov['ruling_batch']['id']];
		$ideology = Goverment::IDEOLOGY[$ruling_batch_data['ideology']];
		$gov_type = Goverment::GOV_TYPES[$ideology['gov']];
		$msg = "%__appeal__%, üì∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ:\nüìù–ù–∞–∑–≤–∞–Ω–∏–µ: %__confa_name__%.\n\n&#128104;&#8205;&#9878;–ì–ª–∞–≤–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞: %__president_name__%.\nüìñ–ü–∞—Ä—Ç–∏—è: {$ruling_batch_data['name']}\nüóø–ò–¥–µ–æ–ª–æ–≥–∏—è: {$ideology['name']}\nüèõ–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ: {$gov_type}";

		$request = json_encode(array('peer_id' => $data->object->peer_id, 'message' => $msg, 'disable_mentions' => true), JSON_UNESCAPED_UNICODE);
		$request = vk_parse_vars($request, array("__president_name__", "__confa_name__", "__appeal__"));

		vk_execute($messagesModule->buildVKSciptAppealByID($data->object->from_id)."var confa_info=API.messages.getConversationsById({'peer_ids':[{$data->object->peer_id}]}).items[0];var president_info=API.users.get({'user_ids':{$president_id},'fields':'screen_name'})[0];var __president_name__='@'+president_info.screen_name+' ('+president_info.first_name+' '+president_info.last_name+')';var __confa_name__=confa_info.chats_settings.title;var __appeal__=appeal;appeal=null;return API.messages.send({$request});");
	}
	else{
		$msg = "%__appeal__%, üì∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ:\nüìù–ù–∞–∑–≤–∞–Ω–∏–µ: %__confa_name__%.\n\n&#128104;&#8205;&#9878;–ì–ª–∞–≤–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞: ‚õî–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.";

		$request = json_encode(array('peer_id' => $data->object->peer_id, 'message' => $msg, 'disable_mentions' => true), JSON_UNESCAPED_UNICODE);
		$request = vk_parse_vars($request, array("__president_name__", "__confa_name__", "__appeal__"));

		vk_execute($messagesModule->buildVKSciptAppealByID($data->object->from_id)."var confa_info = API.messages.getConversationsById({'peer_ids':[{$data->object->peer_id}]}).items[0];var __confa_name__ = confa_info.chats_settings.title;var __appeal__ = appeal; appeal = null;return API.messages.send({$request});");
	}
}

function government_show_laws($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$argv = $finput->argv;
	$db = $finput->db;

	$messagesModule = new Bot\Messages($db);
	$messagesModule->setAppealID($data->object->from_id);

	$laws = government_api_getdata($db)["laws"];
	if(array_key_exists(1, $argv))
		$number = intval($argv[1]);
	else
		$number = 1;

	if(count($laws) == 0){
		$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚ùó–ü–æ–∫–∞ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–æ–Ω–æ–≤!");
		return;
	}

	$laws_content = array();
	for($i = 0; $i < count($laws); $i++){
		$laws_content[] = $laws[$i]["content"];
	}

	/////////////////////////////////////////////////////
	////////////////////////////////////////////////////
	$list_in = &$laws_content; // –í—Ö–æ–¥–Ω–æ–π —Å–ø–∏—Å–æ–∫
	$list_out = array(); // –í—ã—Ö–æ–¥–Ω–æ–π —Å–ø–∏—Å–æ–∫

	$list_number = $number; // –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
	$list_size = 10; // –†–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞
	////////////////////////////////////////////////////
	if(count($list_in) % $list_size == 0)
		$list_max_number = intdiv(count($list_in), $list_size);
	else
		$list_max_number = intdiv(count($list_in), $list_size)+1;
	$list_min_index = ($list_size*$list_number)-$list_size;
	if($list_size*$list_number >= count($list_in))	
		$list_max_index = count($list_in)-1;
	else
		$list_max_index = $list_size*$list_number-1;
	if($list_number <= $list_max_number && $list_number > 0){
		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞
		for($i = $list_min_index; $i <= $list_max_index; $i++){
			$list_out[] = $list_in[$i];
		}
	}
	else{
		// –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
		$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî—É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ø–∏—Å–∫–∞!");
		return;
	}
	////////////////////////////////////////////////////
	////////////////////////////////////////////////////

	$laws_content = $list_out;

	$msg = "%appeal%, üìå–∑–∞–∫–æ–Ω—ã [{$list_number}/{$list_max_number}]:";
	for($i = 0; $i < count($laws_content); $i++){
		$law_id = ($i+1)+10*($list_number-1);
		$msg = $msg . "\n{$law_id}. {$laws_content[$i]}";
	}

	$messagesModule->sendSilentMessage($data->object->peer_id, $msg);
}

function government_laws_cpanel($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$argv = $finput->argv;
	$db = $finput->db;

	$messagesModule = new Bot\Messages($db);
	$messagesModule->setAppealID($data->object->from_id);
	$gov = government_api_getdata($db);

	$president_id = Goverment::getPresidentID($gov);

	if(array_key_exists(1, $argv))
		$command = mb_strtolower($argv[1]);
	else
		$command = "";

	if($command == "–¥–æ–±–∞–≤–∏—Ç—å"){
		if($data->object->from_id == $president_id){
			$time = time();
			$content = mb_substr($data->object->text, 16);

			$gov["laws"][] = array(
				'time' => $time,
				'publisher_id' => $data->object->from_id,
				'content' => $content
			);
			$bulk = new MongoDB\Driver\BulkWrite;
			$bulk->update(['_id' => $db->getID()], ['$set' => ["government.laws" => $gov['laws']]]);
			$db->getMongoDB()->executeBulkWrite("{$db->getDatabaseName()}.chats", $bulk);
			$messagesModule->sendSilentMessage($data->object->peer_id, "@id{$data->object->from_id} (–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ) –æ–±–Ω–æ–≤–∏–ª–æ –∑–∞–∫–æ–Ω—ã.");
		}
		else{
			$messagesModule->sendSilentMessage($data->object->peer_id, Bot\Messages::MESSAGE_NO_RIGHTS);
		}
	}
	elseif($command == "–æ—Ç–º–µ–Ω–∏—Ç—å"){
		if($data->object->from_id == $president_id){
			if(array_key_exists(2, $argv))
				$law_id = intval($argv[2]);
			else
				$law_id = 0;
			if($law_id == 0){
				$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, &#9940;–£–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–æ–Ω–∞!");
				return;
			}

			if(!is_null($gov["laws"][$law_id-1])){
				$law = $gov["laws"][$law_id-1];

				unset($gov["laws"][$law_id-1]);
				$laws_tmp = array_values($gov["laws"]);
				$laws = array();
				for($i = 0; $i < count($laws_tmp); $i++){
					$laws[] = $laws_tmp[$i];
				}
				$gov["laws"] = $laws;
				$bulk = new MongoDB\Driver\BulkWrite;
				$bulk->update(['_id' => $db->getID()], ['$set' => ["government.laws" => $gov['laws']]]);
				$db->getMongoDB()->executeBulkWrite("{$db->getDatabaseName()}.chats", $bulk);
				$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚úÖ–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–æ–Ω ‚Ññ{$law_id}.");
			}
			else{
				$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, &#9940;–ó–∞–∫–æ–Ω–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
			}
		}
		else{
			$messagesModule->sendSilentMessage($data->object->peer_id, Bot\Messages::MESSAGE_NO_RIGHTS);
		}
	}
	elseif($command == "–∏–Ω—Ñ–∞"){
		if(array_key_exists(2, $argv))
			$law_id = intval($argv[2]);
		else
			$law_id = 0;
		if($law_id == 0){
			$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, &#9940;–£–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–æ–Ω–∞!");
			return;
		}

		if(!is_null($gov["laws"][$law_id-1])){
			$law = $gov["laws"][$law_id-1];

			if($law["publisher_id"] == $president_id)
				$publisher_type_str = "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç";
			else
				$publisher_type_str = "–≠–∫c-–øpe–∑–∏–¥e–Ω—Ç";

			$date = gmdate("d.m.Y", $law["time"]+10800);

			$msg = "%__appeal__%, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–æ–Ω–µ:\n‚úÖ–£–∫–∞–∑–∞–Ω: %__publisher_name__% ({$publisher_type_str})\n‚úÖ–î–∞—Ç–∞ —É–∫–∞–∑–∞: {$date}\n‚úÖ–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–∫–æ–Ω–∞: {$law["content"]}";

			$request = json_encode(array('peer_id' => $data->object->peer_id, 'message' => $msg, 'disable_mentions' => true), JSON_UNESCAPED_UNICODE);
			$request = vk_parse_vars($request, array("__publisher_name__", "__appeal__"));

			vk_execute($messagesModule->buildVKSciptAppealByID($data->object->from_id)."var publisher = API.users.get({'user_ids':[{$law['publisher_id']}],'fields':'screen_name,first_name_ins,last_name_ins'})[0];var __publisher_name__ = '@'+publisher.screen_name+' ('+publisher.first_name_ins+' '+publisher.last_name_ins+')';var __appeal__ = appeal; appeal = null;return API.messages.send({$request});");
		}
		else{
			$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, &#9940;–ó–∞–∫–æ–Ω–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
		}
	}
	elseif($command == "–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å"){
		if($data->object->from_id != $president_id){
			$messagesModule->sendSilentMessage($data->object->peer_id, Bot\Messages::MESSAGE_NO_RIGHTS);
			return;
		}
		if(array_key_exists(2, $argv))
			$from = intval($argv[2]);
		else
			$from = 0;

		if(array_key_exists(3, $argv))
			$to = intval($argv[3]);
		else
			$to = 0;

		if($from == $to){
			$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, &#9940;–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–æ–Ω –≤ –æ–¥–Ω–æ –∏ —Ç–æ–∂–µ –º–µ—Å—Ç–æ.");
			return;
		}

		if(is_null($gov["laws"][$from-1])){
			$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, &#9940;–ó–∞–∫–æ–Ω–∞ ‚Ññ{$from} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
			return;
		}
		if(is_null($gov["laws"][$to-1])){
			$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, &#9940;–ó–∞–∫–æ–Ω–∞ ‚Ññ{$to} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
			return;
		}

		$tmp = $gov["laws"][$to-1];
		$gov["laws"][$to-1] = $gov["laws"][$from-1];
		$gov["laws"][$from-1] = $tmp;
		$bulk = new MongoDB\Driver\BulkWrite;
		$bulk->update(['_id' => $db->getID()], ['$set' => ["government.laws" => $gov['laws']]]);
		$db->getMongoDB()->executeBulkWrite("{$db->getDatabaseName()}.chats", $bulk);
		$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚úÖ–ó–∞–∫–æ–Ω ‚Ññ{$from} –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ –º–µ—Å—Ç–æ –∑–∞–∫–æ–Ω–∞ ‚Ññ{$to}.");

	}
	else{
		$commands = array(
			'!–∑–∞–∫–æ–Ω –¥–æ–±–∞–≤–∏—Ç—å <—Ç–µ–∫—Å—Ç> - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–∞',
			'!–∑–∞–∫–æ–Ω –æ—Ç–º–µ–Ω–∏—Ç—å <id> - –û—Ç–º–µ–Ω–∞ –∑–∞–∫–æ–Ω–∞',
			'!–∑–∞–∫–æ–Ω –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å <from> <to> - –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ from –≤ –ø–æ–∑–∏—Ü–∏—é to',
			'!–∑–∞–∫–æ–Ω –∏–Ω—Ñ–∞ <id> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–æ–Ω–µ'

		);
		$messagesModule->sendSilentMessageWithListFromArray($data->object->peer_id, "%appeal%, &#9940;–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:", $commands);
	}
}

function government_president($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$argv = $finput->argv;
	$db = $finput->db;

	$time = time();

	$messagesModule = new Bot\Messages($db);
	$messagesModule->setAppealID($data->object->from_id);
	$gov = government_api_getdata($db);
	$president_id = Goverment::getPresidentID($gov);
	$legitimacy = round($gov['ruling_batch']['legitimacy']);
	if(!array_key_exists(1, $argv)){
		if($president_id != 0){
			$expiration_time = $gov['ruling_batch']['elected_time']+Goverment::TERM_DURATION;
			if($time >= $expiration_time)
				$expiration_info = "‚ùó–ü—Ä–µ–≤—ã—à–µ–Ω —Å—Ä–æ–∫ –ø–æ–ª–Ω–æ–º–æ—á–∏–π";
			else
				$expiration_info = "üìÖ–ü–æ–ª–Ω–æ–º–æ—á–∏—è: –¥–æ " . gmdate("d.m.Y", $expiration_time+10800);
			$msg = "%appeal%,\n&#128104;&#8205;&#9878;–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç: %president_name%.\nüí™üèª–õ–µ–≥–∏—Ç–∏–º–Ω–æ—Å—Ç—å: {$legitimacy}%\n{$expiration_info}";
			$request = json_encode(array('peer_id' => $data->object->peer_id, 'message' => $msg, 'disable_mentions' => true), JSON_UNESCAPED_UNICODE);
			$request = vk_parse_vars($request, array("appeal", "president_name"));
			vk_execute($messagesModule->buildVKSciptAppealByID($data->object->from_id)."var president=API.users.get({'user_ids':{$president_id}})[0];var president_name='@id{$president_id} ('+president.first_name+' '+president.last_name+')';return API.messages.send({$request});");
		}
		else
			$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%,\n&#128104;&#8205;&#9878;–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç: ‚õî–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.");
	}
}

function government_batch($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$argv = $finput->argv;
	$db = $finput->db;

	$messagesModule = new Bot\Messages($db);
	$messagesModule->setAppealID($data->object->from_id);
	$gov = government_api_getdata($db);

	$user_batch = bot_get_array_value($gov["batches"], "batch{$data->object->from_id}", null);
	if(is_null($user_batch)){
		$name = mb_substr($data->object->text, 8); 
		if($name == '')
			$messagesModule->sendSilentMessageWithListFromArray($data->object->peer_id, '%appeal%, –£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä—Ç–∏–∏. –°–æ–∑–¥–∞–π—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è:', ['!–ø–∞—Ä—Ç–∏—è <–Ω–∞–∑–≤–∞–Ω–∏–µ>']);
		else{
			if(mb_strlen($name) > 30){
				$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª—å—à–µ 30 —Å–∏–º–≤–æ–ª–æ–≤.");
				return;
			}

			$ideology = [];
			foreach (Goverment::IDEOLOGY as $key => $value) {
				$ideology[] = vk_callback_button($value['name'], ['government_batch', $data->object->from_id, $name, 2, $key], 'positive');
			}

			$keyboard_buttons = [];
			$listBuiler = new Bot\ListBuilder($ideology, 6);
			$build = $listBuiler->build(1);
			if($build->result){
				for($i = 0; $i < count($build->list->out); $i++){
					$keyboard_buttons[intdiv($i, 2)][$i % 2] = $build->list->out[$i];
				}
				
				if($build->list->max_number > 1){
					$list_buttons = array();
					if($build->list->number != 1){
						$previous_list = $build->list->number - 1;
						$emoji_str = bot_int_to_emoji_str($previous_list);
						$list_buttons[] = vk_callback_button("{$emoji_str} ‚¨Ö", array('government_batch', $data->object->from_id, $name, 1, $previous_list), 'secondary');
					}
					if($build->list->number != $build->list->max_number){
						$next_list = $build->list->number + 1;
						$emoji_str = bot_int_to_emoji_str($next_list);
						$list_buttons[] = vk_callback_button("‚û° {$emoji_str}", array('government_batch', $data->object->from_id, $name, 1, $next_list), 'secondary');
					}
					$keyboard_buttons[] = $list_buttons;
				}
			}
			else{
				$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–¥–µ–æ–ª–æ–≥–∏–π.");
				return;
			}
			
			$keyboard_buttons[] = array(vk_callback_button("–ó–∞–∫—Ä—ã—Ç—å", array('bot_menu', $data->object->from_id, 0), 'negative'));
			$keyboard = vk_keyboard_inline($keyboard_buttons);
			$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, –í—ã–±–µ—Ä–∏—Ç–µ –∏–¥–µ–æ–ª–æ–≥–∏—é –ø–∞—Ä—Ç–∏–∏.", ['keyboard' => $keyboard]);
		}
	}
	else{
		$argv1 = mb_strtolower(bot_get_array_value($argv, 1, ""));
		switch ($argv1) {
			case '—É–¥–∞–ª–∏—Ç—å':
			$user_batch_id = "batch{$data->object->from_id}";

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
			if($gov['ruling_batch']['id'] === $user_batch_id){
				$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–í–∞—à–∞ –ø–∞—Ä—Ç–∏—è —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤—è—â–µ–π.");
				return;
			}
			elseif($gov['election'] !== false && ($gov['election']['candidate1']['batch_id'] === $user_batch_id || $gov['election']['candidate2']['batch_id'] === $user_batch_id)){
				$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–í–∞—à–∞ –ø–∞—Ä—Ç–∏—è —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≤—ã–±–æ—Ä–∞—Ö.");
				return;
			}

			$bulk = new MongoDB\Driver\BulkWrite;
			$bulk->update(['_id' => $db->getID()], ['$unset' => ["government.batches.batch{$data->object->from_id}" => 0]]);
			$db->getMongoDB()->executeBulkWrite("{$db->getDatabaseName()}.chats", $bulk);
			$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚úÖ–ü–∞—Ä—Ç–∏—è —É–¥–∞–ª–µ–Ω–∞.");
			break;
			
			default:
			$date = gmdate("d.m.Y", $user_batch['created_time']+10800);
			$can_be_elected = ($user_batch['can_be_elected'] ? "–î–∞" : "–ù–µ—Ç");
			$ideology = Goverment::IDEOLOGY[$user_batch["ideology"]]["name"];
			$message = "%appeal%, –í–∞—à–∞ –ø–∞—Ä—Ç–∏—è: \nüìù–ù–∞–∑–≤–∞–Ω–∏–µ: {$user_batch["name"]}\nüóø–ò–¥–µ–æ–ª–æ–≥–∏—è: {$ideology}\nüìà–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–æ–∫–æ–≤: {$user_batch['terms_count']}\n‚è≥–°–æ–∑–¥–∞–Ω–∞: {$date}\nüí°–ú–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–±—Ä–∞–Ω–∞: {$can_be_elected}";
			$messagesModule->sendSilentMessage($data->object->peer_id, $message);
			break;
		}
	}
}

function government_batch_cb($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$payload = $finput->payload;
	$db = $finput->db;

	// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
	$keyboard_buttons = array();
	$message = "";

	// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	$testing_user_id = bot_get_array_value($payload, 1, $data->object->user_id);
	if($testing_user_id !== $data->object->user_id){
		bot_show_snackbar($data->object->event_id, $data->object->user_id, $data->object->peer_id, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é!');
		return;
	}

	$name = bot_get_array_value($payload, 2, null);
	if(gettype($name) != "string" || $name == ''){
		bot_show_snackbar($data->object->event_id, $data->object->user_id, $data->object->peer_id, "‚õî –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ.");
		return;
	}
	elseif(mb_strlen($name) > 30){
		bot_show_snackbar($data->object->event_id, $data->object->user_id, $data->object->peer_id, "‚õî –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª—å—à–µ 30 —Å–∏–º–≤–æ–ª–æ–≤.");
		return;
	}

	// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
	$code = bot_get_array_value($payload, 3, 0);
	switch ($code) {
		case 1:
		$list_number = bot_get_array_value($payload, 4, 1);
		$ideology = [];
		foreach (Goverment::IDEOLOGY as $key => $value) {
			$ideology[] = vk_callback_button($value['name'], ['government_batch', $testing_user_id, $name, 2, $key], 'positive');
		}

		$keyboard_buttons = [];
		$listBuiler = new Bot\ListBuilder($ideology, 6);
		$build = $listBuiler->build($list_number);
		if($build->result){
			for($i = 0; $i < count($build->list->out); $i++){
				$keyboard_buttons[intdiv($i, 2)][$i % 2] = $build->list->out[$i];
			}
			
			if($build->list->max_number > 1){
				$list_buttons = array();
				if($build->list->number != 1){
					$previous_list = $build->list->number - 1;
					$emoji_str = bot_int_to_emoji_str($previous_list);
					$list_buttons[] = vk_callback_button("{$emoji_str} ‚¨Ö", array('government_batch', $testing_user_id, $name, 1, $previous_list), 'secondary');
				}
				if($build->list->number != $build->list->max_number){
					$next_list = $build->list->number + 1;
					$emoji_str = bot_int_to_emoji_str($next_list);
					$list_buttons[] = vk_callback_button("‚û° {$emoji_str}", array('government_batch', $testing_user_id, $name, 1, $next_list), 'secondary');
				}
				$keyboard_buttons[] = $list_buttons;
			}
		}
		else{
			bot_show_snackbar($data->object->event_id, $data->object->user_id, $data->object->peer_id, "‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–¥–µ–æ–ª–æ–≥–∏–π.");
			return;
		}
		
		$keyboard_buttons[] = array(vk_callback_button("–ó–∞–∫—Ä—ã—Ç—å", array('bot_menu', $testing_user_id, 0), 'negative'));
		$messege = '%appeal%, –í—ã–±–µ—Ä–∏—Ç–µ –∏–¥–µ–æ–ª–æ–≥–∏—é –ø–∞—Ä—Ç–∏–∏.';
		break;

		case 2:
		$ideology = bot_get_array_value($payload, 4, "");
		if(!array_key_exists($ideology, Goverment::IDEOLOGY)){
			bot_show_snackbar($data->object->event_id, $data->object->user_id, $data->object->peer_id, "‚õî –¢–∞–∫–æ–π –∏–¥–µ–æ–ª–æ–≥–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
			return;
		}

		$gov = government_api_getdata($db);
		$batch_id = "batch{$data->object->user_id}";
		if(array_key_exists($batch_id, $gov['batches'])){
			bot_show_snackbar($data->object->event_id, $data->object->user_id, $data->object->peer_id, "‚õî –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä—Ç–∏—è.");
			return;
		}
		$batch = [
			'leader_id' => $data->object->user_id,
			'name' => $name,
			'ideology' => $ideology,
			'created_time' => time(),
			'terms_count' => 0,
			'can_be_elected' => true
		];
		$bulk = new MongoDB\Driver\BulkWrite;
		$bulk->update(['_id' => $db->getID()], ['$set' => ["government.batches.batch{$data->object->user_id}" => $batch]]);
		$db->getMongoDB()->executeBulkWrite("{$db->getDatabaseName()}.chats", $bulk);

		$message = "%appeal%, ‚úÖ–ü–∞—Ä—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∞.";
		break;

		
		default:
		bot_show_snackbar($data->object->event_id, $data->object->user_id, $data->object->peer_id, "‚õî Internal error.");
		return;
		break;
	}


	$messagesModule = new Bot\Messages($db);
	$messagesModule->setAppealID($data->object->user_id);
	$keyboard = vk_keyboard_inline($keyboard_buttons);
	$messagesModule->editMessage($data->object->peer_id, $data->object->conversation_message_id, $message, array('keyboard' => $keyboard));
}

function government_anthem($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$argv = $finput->argv;
	$db = $finput->db;

	$messagesModule = new Bot\Messages($db);
	$messagesModule->setAppealID($data->object->from_id);
	$gov = government_api_getdata($db);
	if(count($data->object->attachments) == 0){
		if($gov["anthem"] != "null"){
			$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, &#129345;–ù–∞—à –≥–∏–º–Ω: ", array('attachment' => $gov["anthem"]));
		} else {
			$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, &#129345;–£ –Ω–∞—Å –Ω–µ—Ç –≥–∏–º–Ω–∞!");
		}
	}
	else{
		$president_id = Goverment::getPresidentID($gov);
		if($data->object->from_id == $president_id){
			$first_audio_id = -1;
			$audio = "";
			for($i = 0; $i < count($data->object->attachments); $i++){
				if($data->object->attachments[$i]->type == "audio"){
					$first_audio_id = $i;
					break;
				}
			}
			if ($first_audio_id != -1){
				$anthem = "audio{$data->object->attachments[$first_audio_id]->audio->owner_id}_{$data->object->attachments[$first_audio_id]->audio->id}";
				$bulk = new MongoDB\Driver\BulkWrite;
				$bulk->update(['_id' => $db->getID()], ['$set' => ['government.anthem' => $anthem]]);
				$db->getMongoDB()->executeBulkWrite("{$db->getDatabaseName()}.chats", $bulk);
				$msg = "@id{$president_id} (–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç) –∏–∑–º–µ–Ω–∏–ª –≥–∏–º–Ω –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞.";
				$messagesModule->sendSilentMessage($data->object->peer_id, $msg);
			} else {
				$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, &#9940;–ê—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
			}
		}
		else {
			$messagesModule->sendSilentMessage($data->object->peer_id, Bot\Messages::MESSAGE_NO_RIGHTS);
		}
	}
}

function government_flag($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$argv = $finput->argv;
	$db = $finput->db;

	$messagesModule = new Bot\Messages($db);
	$messagesModule->setAppealID($data->object->from_id);
	$gov = government_api_getdata($db);
	if(count($data->object->attachments) == 0){
		if($gov["flag"] != "null"){
			$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, &#127987;–ù–∞—à —Ñ–ª–∞–≥: ", array('attachment' => $gov["flag"]));
		} else {
			$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, &#127987;–£ –Ω–∞—Å –Ω–µ—Ç —Ñ–ª–∞–≥–∞!");
		}
	}
	else {
		$president_id = Goverment::getPresidentID($gov);
		if($data->object->from_id == $president_id){
			$photo_url = $photo_sizes[$photo_url_index]->url;
			$path = BOTPATH_TMP."/photo".mt_rand(0, 65535).".jpg";
			file_put_contents($path, file_get_contents($photo_url));
			$response =  json_decode(vk_execute($messagesModule->buildVKSciptAppealByID($data->object->from_id)."return API.photos.getMessagesUploadServer({'peer_id':{$data->object->peer_id}});"));
			$res = json_decode(vk_uploadDocs(array('photo' => new CURLFile($path)), $response->response->upload_url));
			unlink($path);
			$msg = "@id{$president_id} (–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç) –∏–∑–º–µ–Ω–∏–ª —Ñ–ª–∞–≥ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞.";
			$res_json = json_encode(array('photo' => $res->photo, 'server' => $res->server, 'hash' => $res->hash));
			$photo = json_decode(vk_execute("var doc = API.photos.saveMessagesPhoto({$res_json});API.messages.send({'peer_id':{$data->object->peer_id},'message':'{$msg}','disable_mentions':true});return doc;"))->response[0];
			$gov["flag"] = "photo{$photo->owner_id}_{$photo->id}";
			government_api_setdata($db, $gov);
		}
		else {
			$messagesModule->sendSilentMessage($data->object->peer_id, Bot\Messages::MESSAGE_NO_RIGHTS);
		}
	}
}

function government_rally($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$argv = $finput->argv;
	$db = $finput->db;

	$date = time(); // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤—Ä–µ–º–µ–Ω–∏

	$messagesModule = new Bot\Messages($db);
	$messagesModule->setAppealID($data->object->from_id);

	$argvt = mb_strtolower(bot_get_array_value($argv, 1, ""));

	$gov = government_api_getdata($db);

	if($gov["president_id"] == 0){
		$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.");
		return;
	}
	elseif($gov["referendum"] !== false){
		$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–°–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–¥—è—Ç –≤—ã–±–æ—Ä—ã.");
		return;
	}

	switch ($argvt) {
		case '–∑–∞':
		$rally_for = $gov["rally"]["for"];
		$rally_against = $gov["rally"]["against"];
		if($rally_for !== false){
			if($rally_against !== false && array_key_exists("id{$data->object->from_id}", $rally_against["members"])){
				$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –º–∏—Ç–∏–Ω–≥–µ –ü—Ä–æ—Ç–∏–≤ @id{$gov["president_id"]} (–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞).");
				return;
			}
			elseif(array_key_exists("id{$data->object->from_id}", $rally_for["members"])){
				$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –º–∏—Ç–∏–Ω–≥–µ –ó–∞ @id{$gov["president_id"]} (–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞).");
				return;
			}
			$rally_for["members"]["id{$data->object->from_id}"] = 0;
			$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚úÖ–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –º–∏—Ç–∏–Ω–≥—É –ó–∞ @id{$gov["president_id"]} (–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞).\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ [!–º–∏—Ç–∏–Ω–≥], —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ.");
		}
		else{
			if($rally_against !== false && array_key_exists("id{$data->object->from_id}", $rally_against["members"])){
				$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –º–∏—Ç–∏–Ω–≥–µ –ü—Ä–æ—Ç–∏–≤ @id{$gov["president_id"]} (–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞).");
				return;
			}
			$rally_for = array(
				'organizer_id' => $data->object->from_id,
				'members' => array(
					"id{$data->object->from_id}" => 0
				)
			);
			$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚úÖ–í—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª–∏ –º–∏—Ç–∏–Ω–≥ –ó–∞ @id{$gov["president_id"]} (–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞).\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ [!–º–∏—Ç–∏–Ω–≥], —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ.");
		}
		$gov["rally"]["for"] = $rally_for;
		government_api_setdata($db, $gov);
		break;

		case '–ø—Ä–æ—Ç–∏–≤':
		$rally_for = $gov["rally"]["for"];
		$rally_against = $gov["rally"]["against"];
		if($rally_against !== false){
			if($rally_for !== false && array_key_exists("id{$data->object->from_id}", $rally_for["members"])){
				$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –º–∏—Ç–∏–Ω–≥–µ –ó–∞ @id{$gov["president_id"]} (–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞).");
				return;
			}
			elseif($data->object->from_id == $gov["president_id"]){
				$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–∏—Ç–∏–Ω–≥–µ –ø—Ä–æ—Ç–∏–≤ —Å–µ–±—è.");
				return;
			}
			elseif(array_key_exists("id{$data->object->from_id}", $rally_against["members"])){
				$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –º–∏—Ç–∏–Ω–≥–µ –ü—Ä–æ—Ç–∏–≤ @id{$gov["president_id"]} (–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞).");
				return;
			}
			$rally_against["members"]["id{$data->object->from_id}"] = 0;
			$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚úÖ–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –º–∏—Ç–∏–Ω–≥—É –ü—Ä–æ—Ç–∏–≤ @id{$gov["president_id"]} (–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞).\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ [!–º–∏—Ç–∏–Ω–≥], —á—Ç–æ–±—ã —Å–≤–µ—Ä–≥–Ω—É—Ç—å –µ–≥–æ.");
		}
		else{
			if($rally_for !== false && array_key_exists("id{$data->object->from_id}", $rally_for["members"])){
				$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –º–∏—Ç–∏–Ω–≥–µ –ó–∞ @id{$gov["president_id"]} (–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞).");
				return;
			}
			elseif($data->object->from_id == $gov["president_id"]){
				$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—Å—Ç—Ä–æ–∏—Ç—å –º–∏—Ç–∏–Ω–≥ –ø—Ä–æ—Ç–∏–≤ —Å–µ–±—è.");
				return;
			}
			$rally_against = array(
				'organizer_id' => $data->object->from_id,
				'members' => array(
					"id{$data->object->from_id}" => 0
				)
			);
			$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚úÖ–í—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª–∏ –º–∏—Ç–∏–Ω–≥ –ü—Ä–æ—Ç–∏–≤ @id{$gov["president_id"]} (–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞).\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ [!–º–∏—Ç–∏–Ω–≥], —á—Ç–æ–±—ã —Å–≤–µ—Ä–≥–Ω—É—Ç—å –µ–≥–æ.");
		}
		$gov["rally"]["against"] = $rally_against;
		government_api_setdata($db, $gov);
		break;
		
		default:
		$rally_for = $gov["rally"]["for"];
		$rally_against = $gov["rally"]["against"];
		$member_key = "id{$data->object->from_id}";
		if($rally_for !== false && array_key_exists($member_key, $rally_for["members"])){
			if($date - $rally_for["members"][$member_key] >= 3600){
				$members_count = count($rally_against["members"]);
				$r = json_decode(vk_execute($messagesModule->buildVKSciptAppealByID($data->object->from_id)."var peer_id={$data->object->peer_id};var presidential_power={$gov["presidential_power"]};var members_in_chat=API.messages.getConversationMembers({'peer_id':peer_id});var members_in_rally={$members_count};var percentage_of_one=(1/members_in_chat.profiles.length)*0.1;var rally_result=percentage_of_one+(members_in_rally-1)*(percentage_of_one*0.25);presidential_power=presidential_power+rally_result*100;if(presidential_power>100){presidential_power=100;}API.messages.send({'peer_id':peer_id,'message':appeal+', ‚úÖ–í—ã –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –º–∏—Ç–∏–Ω–≥–µ –ó–∞ @id{$gov["president_id"]} (–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞).','disable_mentions':true});return presidential_power;"));
				if(gettype($r) == "object" && property_exists($r, 'response')){
					$presidential_power = $r->response;
					$gov["rally"]["for"]["members"][$member_key] = $date;
					$gov["presidential_power"] = $presidential_power;
					government_api_setdata($db, $gov);
				}
			}
			else{
				$left_time = 3600 - ($date - $rally_for["members"][$member_key]);
				$minutes = intdiv($left_time, 60);
				$seconds = $left_time % 60;
				$left_time_text = "";
				if($minutes != 0)
					$left_time_text = "{$minutes} –º–∏–Ω. ";
				$left_time_text = $left_time_text."{$seconds} —Å–µ–∫.";
				$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–í—ã —É—Å—Ç–∞–ª–∏ –∏ –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –º–∏—Ç–∏–Ω–≥–æ–≤–∞—Ç—å. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ {$left_time_text}");
			}
		}
		elseif($rally_against !== false && array_key_exists($member_key, $rally_against["members"])){
			if($date - $rally_against["members"][$member_key] >= 3600){
				$members_count = count($rally_against["members"]);
				$r = json_decode(vk_execute($messagesModule->buildVKSciptAppealByID($data->object->from_id)."var peer_id={$data->object->peer_id};var presidential_power={$gov["presidential_power"]};var users=API.users.get({'user_ids':[{$rally_against["organizer_id"]},{$gov["president_id"]}],'fields':'first_name_ins,last_name_ins,first_name_gen,last_name_gen'});var members_in_chat=API.messages.getConversationMembers({'peer_id':peer_id});var members_in_rally={$members_count};var percentage_of_one=(1/members_in_chat.profiles.length)*0.1;var rally_result=percentage_of_one+(members_in_rally-1)*(percentage_of_one*0.25);presidential_power=presidential_power-rally_result*100;if(presidential_power<=0){presidential_power=0;API.messages.send({'peer_id':peer_id,'message':'‚ùó–ú–∏—Ç–∏–Ω–≥, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π @id'+users[0].id+' ('+users[0].first_name_ins.substr(0, 2)+'. '+users[0].last_name_ins+'), –ø–æ–∑–≤–æ–ª–∏–ª –¥–æ–±–∏—Ç—å—Å—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ –∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å–≤–æ @id'+users[1].id+' ('+users[1].first_name_gen.substr(0, 2)+'. '+users[1].last_name_gen+') –ø–æ–¥–∞–ª–æ –≤ –æ—Ç—Å—Ç–∞–≤–∫—É. –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã –¥–æ—Å—Ä–æ—á–Ω—ã–µ –≤—ã–±–æ—Ä—ã –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞.','disable_mentions':true});}else{API.messages.send({'peer_id':peer_id,'message':appeal+', ‚úÖ–í—ã –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –º–∏—Ç–∏–Ω–≥–µ –ü—Ä–æ—Ç–∏–≤ @id{$gov["president_id"]} (–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞).','disable_mentions':true});}return presidential_power;"));
				if(gettype($r) == "object" && property_exists($r, 'response')){
					$presidential_power = $r->response;
					if($presidential_power == 0){
						$gov["previous_president_id"] = $gov["president_id"];
						$gov["president_id"] = 0;
						$gov["rally"] = DB_GOVERNMENT_DEFAULT["rally"];
						$gov["batch_name"] = DB_GOVERNMENT_DEFAULT["batch_name"];
						$gov["referendum"] = array(
							'candidate1' => array('id' => 0, "voters_count" => 0),
							'candidate2' => array('id' => 0, "voters_count" => 0),
							'all_voters' => array(),
							'start_time' => $date,
							'last_notification_time' => 0
						);
						government_api_setdata($db, $gov);
					}
					else{
						$gov["rally"]["against"]["members"][$member_key] = $date;
						$gov["presidential_power"] = $presidential_power;
						government_api_setdata($db, $gov);
					}
				}
			}
			else{
				$left_time = 3600 - ($date - $rally_against["members"][$member_key]);
				$minutes = intdiv($left_time, 60);
				$seconds = $left_time % 60;
				$left_time_text = "";
				if($minutes != 0)
					$left_time_text = "{$minutes} –º–∏–Ω. ";
				$left_time_text = $left_time_text."{$seconds} —Å–µ–∫.";
				$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–í—ã —É—Å—Ç–∞–ª–∏ –∏ –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –º–∏—Ç–∏–Ω–≥–æ–≤–∞—Ç—å. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ {$left_time_text}");
			}
		}
		else{
			$messagesModule->sendSilentMessageWithListFromArray($data->object->peer_id, "%appeal%, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:", array(
				'!–º–∏—Ç–∏–Ω–≥ –∑–∞ - –ú–∏—Ç–∏–Ω–≥ –∑–∞ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞',
				'!–º–∏—Ç–∏–Ω–≥ –ø—Ä–æ—Ç–∏–≤ - –ú–∏—Ç–∏–Ω–≥ –ø—Ä–æ—Ç–∏–≤ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞'
			));
		}
		break;
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// –°–∏—Å—Ç–µ–º–∞ –≤—ã–±–æ—Ä–æ–≤

function government_election_start($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$argv = $finput->argv;
	$db = $finput->db;

	$messagesModule = new Bot\Messages($db);
	$messagesModule->setAppealID($data->object->from_id);

	$gov = government_api_getdata($db);

	$owner_id = $db->getValueLegacy(['owner_id']);
	if((is_null($gov['ruling_batch']['id']) && $data->object->from_id == $owner_id) || $gov['ruling_batch']['id'] == "batch{$data->object->from_id}"){
		if($gov["election"] === false){
			$time = time(); // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤—Ä–µ–º–µ–Ω–∏
			$election = array(
				'candidate1' => array('batch_id' => 0, "voters_count" => 0),
				'candidate2' => array('batch_id' => 0, "voters_count" => 0),
				'users' => array(),
				'start_time' => $time,
				'last_notification_time' => $time
			);
			$users = json_decode(vk_execute("API.messages.send({peer_id:{$data->object->peer_id},message:'–ù–∞—á–∞–ª–∏—Å—å –≤—ã–±–æ—Ä—ã –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞. –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \"!–±–∞–ª–ª–æ—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è\".'});var members=API.messages.getConversationMembers({peer_id:{$data->object->peer_id}});return members.profiles@.id;"))->response;
			foreach ($users as $key => $value) {
				$election['users']["id{$value}"] = 0;
			}
			$bulk = new MongoDB\Driver\BulkWrite;
			$bulk->update(['_id' => $db->getID()], ['$set' => ['government.rally' => false, 'government.election' => $election]]);
			$db->getMongoDB()->executeBulkWrite("{$db->getDatabaseName()}.chats", $bulk);
		}
		else
			$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, –≤—ã–±–æ—Ä—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥—è—Ç.");
	}
	else
		$messagesModule->sendSilentMessage($data->object->peer_id, Bot\Messages::MESSAGE_NO_RIGHTS);
}

function government_election_candidate($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$argv = $finput->argv;
	$db = $finput->db;

	$messagesModule = new Bot\Messages($db);
	$messagesModule->setAppealID($data->object->from_id);

	$gov = government_api_getdata($db);

	if($gov["election"] === false){
		$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–°–µ–π—á–∞—Å –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤—ã–±–æ—Ä—ã.");
		return;
	}

	$time = time();
	if($time - $gov['election']['start_time'] >= Goverment::ELECTION_DURATION){
		$bulk = new MongoDB\Driver\BulkWrite;
		$bulk->update(['_id' => $db->getID()], ['$set' => ['government.election' => false]]);
		$db->getMongoDB()->executeBulkWrite("{$db->getDatabaseName()}.chats", $bulk);
		$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–í—Ä–µ–º—è –≤—ã–±–æ—Ä–æ–≤ –∑–∞–∫–æ–Ω—á–µ–Ω–æ. –ù–µ—É–¥–∞–ª–æ—Å—å –Ω–∞–±—Ä–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.");
		return;
	}

	$user_batch_id = "batch{$data->object->from_id}";
	$user_batch = bot_get_array_value($gov["batches"], $user_batch_id);

	if(is_null($user_batch)){
		$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–£ –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–π –ø–∞—Ä—Ç–∏–∏. –°–≤–æ—é –ø–∞—Ä—Ç–∏—é –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π !–ø–∞—Ä—Ç–∏—è.");
		return;
	}

	if(!$user_batch['can_be_elected']){
		$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–í–∞—à–µ–π –ø–∞—Ä—Ç–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏–∑–±–∏—Ä–∞—Ç—å—Å—è.");
		return;
	}

	if($gov['ruling_batch']['id'] === $user_batch_id && $gov['ruling_batch']['terms_count'] >= 2){
		$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∏–∑–±—Ä–∞—Ç—å—Å—è –Ω–∞ 3 —Å—Ä–æ–∫ –ø–æ–¥—Ä—è–¥.");
		return;
	}

	if($gov['election']['candidate1']['batch_id'] === $user_batch_id || $gov['election']['candidate2']['batch_id'] === $user_batch_id){
		$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤—ã–±–æ—Ä–∞—Ö.");
		return;
	}

	if($gov['election']['candidate1']['batch_id'] === 0){
		$bulk = new MongoDB\Driver\BulkWrite;
		$bulk->update(['_id' => $db->getID()], ['$set' => ['government.election.candidate1.batch_id' => $user_batch_id]]);
		$db->getMongoDB()->executeBulkWrite("{$db->getDatabaseName()}.chats", $bulk);
		$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚úÖ–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –ö–∞–Ω–¥–∏–¥–∞—Ç ‚Ññ1.");
	}
	elseif($gov['election']['candidate2']['batch_id'] === 0){
		$bulk = new MongoDB\Driver\BulkWrite;
		$bulk->update(['_id' => $db->getID()], ['$set' => ['government.election.candidate2.batch_id' => $user_batch_id]]);
		$db->getMongoDB()->executeBulkWrite("{$db->getDatabaseName()}.chats", $bulk);
		$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚úÖ–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –ö–∞–Ω–¥–∏–¥–∞—Ç ‚Ññ2.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å.");
	}
	else
		$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–í—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞–±—Ä–∞–Ω—ã.");
}

function government_election_vote($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$argv = $finput->argv;
	$db = $finput->db;

	$messagesModule = new Bot\Messages($db);
	$messagesModule->setAppealID($data->object->from_id);

	$gov = government_api_getdata($db);

	if($gov["election"] === false){
		$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–°–µ–π—á–∞—Å –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤—ã–±–æ—Ä—ã.");
		return;
	}

	if($gov['election']['candidate1']['batch_id'] === 0 || $gov['election']['candidate2']['batch_id'] === 0){
		$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ –Ω–∞–±—Ä–∞–Ω—ã.");
		return;
	}

	$time = time();
	if($time - $gov['election']['start_time'] >= Goverment::ELECTION_DURATION){
		$messagesModule->sendSilentMessage($data->object->peer_id, "%appeal%, ‚õî–í—Ä–µ–º—è –≤—ã–±–æ—Ä–æ–≤ –∑–∞–∫–æ–Ω—á–µ–Ω–æ.");
		return;
	}

	$candidate1_batch = $gov['batches'][$gov['election']['candidate1']['batch_id']];
	$candidate2_batch = $gov['batches'][$gov['election']['candidate2']['batch_id']];
	$candidate1_ideology = Goverment::IDEOLOGY[$gov['batches'][$gov['election']['candidate1']['batch_id']]['ideology']]['name'];
	$candidate2_ideology = Goverment::IDEOLOGY[$gov['batches'][$gov['election']['candidate2']['batch_id']]['ideology']]['name'];

	$keyboard = vk_keyboard_inline([
		[vk_callback_button('‚úè%candidate1_name%', ['government_vote', 1], 'positive')],
		[vk_callback_button('‚úè%candidate2_name%', ['government_vote', 2], 'positive')]
	]);
	$message = ", –í—ã–±–æ—Ä—ã:\n\nüë§–ö–∞–Ω–¥–∏–¥–∞—Ç: %candidate1_appeal%\nüìù–ü–∞—Ä—Ç–∏—è: {$candidate1_batch["name"]}\nüóø–ò–¥–µ–æ–ª–æ–≥–∏—è: {$candidate1_ideology}\n\nüë§–ö–∞–Ω–¥–∏–¥–∞—Ç: %candidate2_appeal%\nüìù–ü–∞—Ä—Ç–∏—è: {$candidate2_batch["name"]}\nüóø–ò–¥–µ–æ–ª–æ–≥–∏—è: {$candidate2_ideology}";
	$json = json_encode(['m' => $message, 'k' => $keyboard], JSON_UNESCAPED_UNICODE);
	$json = vk_parse_vars($json, ['candidate1_name', 'candidate2_name', 'candidate1_appeal', 'candidate2_appeal']);

	vk_execute($messagesModule->buildVKSciptAppealByID($data->object->from_id)."var members=API.users.get({user_ids:[{$candidate1_batch['leader_id']},{$candidate2_batch['leader_id']}]});var candidate1_name=members[0].first_name.substr(0, 2)+\". \"+members[0].last_name;var candidate2_name=members[1].first_name.substr(0, 2)+\". \"+members[1].last_name;var candidate1_appeal=\"@id\"+members[0].id+\" (\"+candidate1_name+\")\";var candidate2_appeal=\"@id\"+members[1].id+\" (\"+candidate2_name+\")\";var json={$json};API.messages.send({peer_id:{$data->object->peer_id},message:appeal+json.m,keyboard:json.k});");
}

function government_election_vote_cb($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$payload = $finput->payload;
	$db = $finput->db;

	$gov = government_api_getdata($db);

	if($gov["election"] === false){
		bot_show_snackbar($data->object->event_id, $data->object->user_id, $data->object->peer_id, '‚õî –°–µ–π—á–∞—Å –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤—ã–±–æ—Ä—ã.');
		return;
	}

	if($gov['election']['candidate1']['batch_id'] === 0 || $gov['election']['candidate2']['batch_id'] === 0){
		bot_show_snackbar($data->object->event_id, $data->object->user_id, $data->object->peer_id, '‚õî –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ –Ω–∞–±—Ä–∞–Ω—ã.');
		return;
	}

	$time = time();
	if($time - $gov['election']['start_time'] >= Goverment::ELECTION_DURATION){
		bot_show_snackbar($data->object->event_id, $data->object->user_id, $data->object->peer_id, '‚õî –í—Ä–µ–º—è –≤—ã–±–æ—Ä–æ–≤ –∑–∞–∫–æ–Ω—á–µ–Ω–æ.');
		return;
	}

	if(!array_key_exists("id{$data->object->user_id}", $gov['election']['users'])){
		bot_show_snackbar($data->object->event_id, $data->object->user_id, $data->object->peer_id, '‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å.');
		return;
	}

	$time_passed = $time - $gov['election']['users']["id{$data->object->user_id}"];
	if($time_passed >= 600){
		$candidate = intval(bot_get_array_value($payload, 1, 0));
		$message = "";
		$bulk = new MongoDB\Driver\BulkWrite;
		switch ($candidate){
			case 1:
			$bulk->update(['_id' => $db->getID()], ['$inc' => ['government.election.candidate1.voters_count' => 1], '$set' => ["government.election.users.id{$data->object->user_id}" => $time]]);
			$message = '‚úè –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –ö–∞–Ω–¥–∏–¥–∞—Ç–∞ ‚Ññ1. –í—ã –º–æ–∂–µ—Ç–µ –µ—â–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.';
			break;

			case 2:
			$bulk->update(['_id' => $db->getID()], ['$inc' => ['government.election.candidate2.voters_count' => 1], '$set' => ["government.election.users.id{$data->object->user_id}" => $time]]);
			$message = '‚úè –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –ö–∞–Ω–¥–∏–¥–∞—Ç–∞ ‚Ññ2. –í—ã –º–æ–∂–µ—Ç–µ –µ—â–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.';
			break;
			
			default:
			bot_show_snackbar($data->object->event_id, $data->object->user_id, $data->object->peer_id, '‚õî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç.');
			return;
			break;
		}
		$db->getMongoDB()->executeBulkWrite("{$db->getDatabaseName()}.chats", $bulk);
		bot_show_snackbar($data->object->event_id, $data->object->user_id, $data->object->peer_id, $message);
	}
	else{
		$time_left = 600 - $time_passed;
		$minutes = intdiv($time_left, 60);
		$seconds = $time_left % 60;
		$info = "";
		if($minutes != 0)
			$info = "{$minutes} –º–∏–Ω. ";
		$info .= "{$seconds} —Å–µ–∫.";
		bot_show_snackbar($data->object->event_id, $data->object->user_id, $data->object->peer_id, "‚õî –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ {$info}");
	}
}

function government_election_system($finput){
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	$data = $finput->data; 
	$db = $finput->db;

	$gov = government_api_getdata($db);
	$time = time();

	if($gov["election"] === false)
		return false;

	if($time - $gov['election']['start_time'] >= Goverment::ELECTION_DURATION){
		$messagesModule = new Bot\Messages($db);
		$bulk = new MongoDB\Driver\BulkWrite;

		if($gov['election']['candidate1']['batch_id'] === 0 || $gov['election']['candidate2']['batch_id'] === 0)
			$messagesModule->sendSilentMessage($data->object->peer_id, "‚õî–í—ã–±–æ—Ä—ã –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∏—Å—å. –ü—Ä–∏—á–∏–Ω–∞: –ù–µ –Ω–∞–±—Ä–∞–Ω–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.");
		else{
			if($gov['election']['candidate1']['voters_count'] > $gov['election']['candidate2']['voters_count']){
				$batch_id = $gov['election']['candidate1']['batch_id'];
				$gov['batches'][$batch_id]['terms_count']++;
				if($gov['ruling_batch']['id'] === $batch_id)
					$bulk->update(['_id' => $db->getID()], ['$inc' => ['government.ruling_batch.terms_count' => 1, "government.batches.{$batch_id}.terms_count" => 1], '$set' => ['government.ruling_batch.elected_time' => $gov['election']['start_time']+Goverment::ELECTION_DURATION]]);
				else{
					$ruling_batch = ['id' => $batch_id, 'legitimacy' => 100, 'terms_count' => 1, 'elected_time' => $gov['election']['start_time']+Goverment::ELECTION_DURATION];
					$bulk->update(['_id' => $db->getID()], ['$inc' => ["government.batches.{$batch_id}.terms_count" => 1], '$set' => ["government.ruling_batch" => $ruling_batch]]);
				}
				$candidate_id = $gov['batches'][$batch_id]['leader_id'];
				$all_voters_count = $gov['election']['candidate1']['voters_count'] + $gov['election']['candidate2']['voters_count'];
				$candidate_percent = round($gov['election']['candidate1']['voters_count']/$all_voters_count*100, 1);
				vk_execute("var users=API.users.get({'user_ids':[{$candidate_id}],'fields':'first_name_gen,last_name_gen,sex'});var sex_word='–û–Ω';if(users[0].sex==1){sex_word='–û–Ω–∞';}var msg='‚úÖ–ù–∞ –≤—ã–±–æ—Ä–∞—Ö –ø–æ–±–µ–∂–¥–∞–µ—Ç @id'+users[0].id+' ('+users[0].first_name+' '+users[0].last_name+'). '+sex_word+' –ø–æ–±–µ–∂–¥–∞–µ—Ç, –Ω–∞–±—Ä–∞–≤ {$candidate_percent}% –≥–æ–ª–æ—Å–æ–≤ –∏–∑–±–∏—Ä–∞—Ç–µ–ª–µ–π. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!';API.messages.send({'peer_id':{$data->object->peer_id},'message':msg});");
			}
			elseif($gov['election']['candidate1']['voters_count'] < $gov['election']['candidate2']['voters_count']){
				$batch_id = $gov['election']['candidate2']['batch_id'];
				$gov['batches'][$batch_id]['terms_count']++;
				if($gov['ruling_batch']['id'] === $batch_id)
					$bulk->update(['_id' => $db->getID()], ['$inc' => ['government.ruling_batch.terms_count' => 1, "government.batches.{$batch_id}.terms_count" => 1], '$set' => ['government.ruling_batch.elected_time' => $gov['election']['start_time']+Goverment::ELECTION_DURATION]]);
				else{
					$ruling_batch = ['id' => $batch_id, 'legitimacy' => 100, 'terms_count' => 1, 'elected_time' => $gov['election']['start_time']+Goverment::ELECTION_DURATION];
					$bulk->update(['_id' => $db->getID()], ['$inc' => ["government.batches.{$batch_id}.terms_count" => 1], '$set' => ["government.ruling_batch" => $ruling_batch]]);
				}
				$candidate_id = $gov['batches'][$batch_id]['leader_id'];
				$all_voters_count = $gov['election']['candidate1']['voters_count'] + $gov['election']['candidate2']['voters_count'];
				$candidate_percent = round($gov['election']['candidate2']['voters_count']/$all_voters_count*100, 1);
				vk_execute("var users=API.users.get({'user_ids':[{$candidate_id}],'fields':'first_name_gen,last_name_gen,sex'});var sex_word='–û–Ω';if(users[0].sex==1){sex_word='–û–Ω–∞';}var msg='‚úÖ–ù–∞ –≤—ã–±–æ—Ä–∞—Ö –ø–æ–±–µ–∂–¥–∞–µ—Ç @id'+users[0].id+' ('+users[0].first_name+' '+users[0].last_name+'). '+sex_word+' –ø–æ–±–µ–∂–¥–∞–µ—Ç, –Ω–∞–±—Ä–∞–≤ {$candidate_percent}% –≥–æ–ª–æ—Å–æ–≤ –∏–∑–±–∏—Ä–∞—Ç–µ–ª–µ–π. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!';API.messages.send({'peer_id':{$data->object->peer_id},'message':msg});");
			}
			else
				$messagesModule->sendSilentMessage($data->object->peer_id, "‚õî–í—ã–±–æ—Ä—ã –æ–∫–æ–Ω—á–µ–Ω—ã. –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–±–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞–±—Ä–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤.");
		}

		$bulk->update(['_id' => $db->getID()], ['$set' => ['government.election' => false]]);
		$db->getMongoDB()->executeBulkWrite("{$db->getDatabaseName()}.chats", $bulk);
		return true;
	}
	elseif($time - $gov['election']["last_notification_time"] >= 600){
		$bulk = new MongoDB\Driver\BulkWrite;
		$bulk->update(['_id' => $db->getID()], ['$set' => ['government.election.last_notification_time' => $time]]);
		$db->getMongoDB()->executeBulkWrite("{$db->getDatabaseName()}.chats", $bulk);

		if($gov['election']['candidate1']['batch_id'] === 0 || $gov['election']['candidate2']['batch_id'] === 0){
			$msg = "–ù–∞—á–∞–ª–∏—Å—å –≤—ã–±–æ—Ä—ã –≤ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—ã –±–µ—Å–µ–¥—ã. –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É [!–±–∞–ª–ª–æ—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è].";
			vk_execute("return API.messages.send({'peer_id':{$data->object->peer_id},'message':'{$msg}'});");
		}
		else {
			$candidate1_batch = $gov['batches'][$gov['election']['candidate1']['batch_id']];
			$candidate2_batch = $gov['batches'][$gov['election']['candidate2']['batch_id']];
			$candidate1_ideology = Goverment::IDEOLOGY[$gov['batches'][$gov['election']['candidate1']['batch_id']]['ideology']]['name'];
			$candidate2_ideology = Goverment::IDEOLOGY[$gov['batches'][$gov['election']['candidate2']['batch_id']]['ideology']]['name'];

			$keyboard = vk_keyboard_inline([
				[vk_callback_button('‚úè%candidate1_name%', ['government_vote', 1], 'positive')],
				[vk_callback_button('‚úè%candidate2_name%', ['government_vote', 2], 'positive')]
			]);
			$message = "–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞–±—Ä–∞–Ω—ã, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å.\n\nüë§–ö–∞–Ω–¥–∏–¥–∞—Ç: %candidate1_appeal%\nüìù–ü–∞—Ä—Ç–∏—è: {$candidate1_batch["name"]}\nüóø–ò–¥–µ–æ–ª–æ–≥–∏—è: {$candidate1_ideology}\n\nüë§–ö–∞–Ω–¥–∏–¥–∞—Ç: %candidate2_appeal%\nüìù–ü–∞—Ä—Ç–∏—è: {$candidate2_batch["name"]}\nüóø–ò–¥–µ–æ–ª–æ–≥–∏—è: {$candidate2_ideology}";
			$json = json_encode(['m' => $message, 'k' => $keyboard], JSON_UNESCAPED_UNICODE);
			$json = vk_parse_vars($json, ['candidate1_name', 'candidate2_name', 'candidate1_appeal', 'candidate2_appeal']);

			vk_execute("var members=API.users.get({user_ids:[{$candidate1_batch['leader_id']},{$candidate2_batch['leader_id']}]});var candidate1_name=members[0].first_name.substr(0, 2)+\". \"+members[0].last_name;var candidate2_name=members[1].first_name.substr(0, 2)+\". \"+members[1].last_name;var candidate1_appeal=\"@id\"+members[0].id+\" (\"+candidate1_name+\")\";var candidate2_appeal=\"@id\"+members[1].id+\" (\"+candidate2_name+\")\";var json={$json};API.messages.send({peer_id:{$data->object->peer_id},message:json.m,keyboard:json.k,disable_mentions:true});");
		}
	}
}

?>