import subprocess, json, time
import radabot.core.bot as bot
from radabot.core.io import ChatEventManager, ChatOutput
from radabot.core.system import PageBuilder, ValueExtractor, int2emoji
from radabot.core.vk import VKVariable, callback_button, keyboard, keyboard_inline

def handle_event(vk_api, event):
	manager = ChatEventManager(vk_api, event)

	manager.addMessageCommand("!—Å—Ç–∞—Ç–∞", StatsMessageCommand.main)
	manager.addMessageCommand('!cmdlist', ShowCommandListMessageCommand.main)

	manager.addMessageCommand("!—Ç–µ—Å—Ç", test, args=['–°—É–∫–∞'])
	manager.addMessageCommand("!—Ç–µ—Å—Ç2", test2)
	manager.addMessageCommand('!error', error)

	manager.addCallbackButtonCommand('bot_cancel', CancelCallbackButtonCommand.main)

	initcmd_php(manager)
	manager.handle()

# –ö–æ–º–∞–Ω–¥–∞ !—Å—Ç–∞—Ç–∞
class StatsMessageCommand:
	@staticmethod
	def main(callin: ChatEventManager.CallbackInputObject):
		event = callin.event
		args = callin.args
		db = callin.db
		output = callin.output

		member_id = args.int(2, 0)
		if(member_id <= 0):
			member_id = event.bunch.object.from_id
		if('fwd_messages' in event.bunch.object):
			try:
				member_id = event.bunch.object.fwd_messages[0].from_id
			except IndexError:
				pass

		if(member_id <= 0):
			StatsMessageCommand.print_error_invalid_userid(output)
			return False

		subcommand = args.str(1, '').lower()
		if(subcommand == '–¥–Ω—è'):
			current_time = time.time()											# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
			current_day = int(current_time - (current_time % 86400));			# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã (00:00 GMT)

			if(member_id == event.bunch.object.from_id):
				pre_msg = "C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è:"
			else:
				pre_msg = "–°—Ç–∞—Å—Ç–∏–∫–∞ –¥–Ω—è @id{} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):".format(member_id)

			chats_collection = db['chats']
			projection = {'_id': 0, 'chat_stats.users_daily.time{}'.format(current_day): 1}
			result = chats_collection.find_one(bot.get_chat_db_query(event.bunch.object.peer_id), projection=projection)
			extractor = ValueExtractor(result)

			all_stats = extractor.get('chat_stats.users_daily.time{}'.format(current_day), {})
			stats = extractor.get('chat_stats.users_daily.time{}.id{}'.format(current_day, member_id).format(member_id), {})
			stats = {**bot.ChatStats.STATS_DEFAULT, **stats}

			rating = []
			for k, v in all_stats.items():
				u = {**bot.ChatStats.STATS_DEFAULT, **v}
				rating.append({'u': k, 'v': u['msg_count'] - u['msg_count_in_succession']})
			rating.sort(reverse=True, key=lambda e: e['v'])

			position = 0
			for user in rating:
				position += 1
				if(user['u'] == "id{}".format(member_id)):
					break
			rating_text = "{} –º–µ—Å—Ç–æ".format(position)
			
			basic_info = "\nüìß–°–æ–æ–±—â–µ–Ω–∏–π: {msg_count}\n&#12288;üìù–ü–æ–¥—Ä—è–¥: {msg_count_in_succession}\nüîç–°–∏–º–≤–æ–ª–æ–≤: {simbol_count}\nüìü–ì–æ–ª. —Å–æ–æ–±—â–µ–Ω–∏–π: {audio_msg_count}"
			attachment_info = "\n\nüì∑–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photo_count}\nüìπ–í–∏–¥–µ–æ: {video_count}\nüéß–ê—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π: {audio_count}\nü§°–°—Ç–∏–∫–µ—Ä–æ–≤: {sticker_count}"
			cmd_info = "\n\nüõ†–ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {command_used_count}\nüîò–ù–∞–∂–∞—Ç–æ –∫–Ω–æ–ø–æ–∫: {button_pressed_count}"
			rating_info = "\n\nüëë–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {rating_text}"
			
			info = pre_msg + basic_info + attachment_info + cmd_info + rating_info
			info = info.format(msg_count=stats['msg_count'], msg_count_in_succession=stats['msg_count_in_succession'], 
								simbol_count=stats['simbol_count'], audio_msg_count=stats['audio_msg_count'],
								photo_count=stats['photo_count'], video_count=stats['video_count'],
								audio_count=stats['audio_count'], sticker_count=stats['sticker_count'],
								command_used_count=stats['command_used_count'], button_pressed_count=stats['button_pressed_count'],
								rating_text=rating_text)

			StatsMessageCommand.print_info(output, info, event.bunch.object.from_id, member_id, True)
			return True
		elif(subcommand == ''):
			chats_collection = db['chats']
			projection = {'_id': 0, 'chat_stats.users': 1}
			result = chats_collection.find_one(bot.get_chat_db_query(event.bunch.object.peer_id), projection=projection)
			extractor = ValueExtractor(result)

			if(member_id == event.bunch.object.from_id):
				pre_msg = "C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
			else:
				pre_msg = "–°—Ç–∞—Å—Ç–∏–∫–∞ @id{} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):".format(member_id)

			all_stats = extractor.get('chat_stats.users', {})
			stats = extractor.get('chat_stats.users.id{}'.format(member_id), {})
			stats = {**bot.ChatStats.STATS_DEFAULT, **stats}

			rating = []
			for k, v in all_stats.items():
				u = {**bot.ChatStats.STATS_DEFAULT, **v}
				rating.append({'u': k, 'v': u['msg_count'] - u['msg_count_in_succession']})
			rating.sort(reverse=True, key=lambda e: e['v'])

			position = 0
			for user in rating:
				position += 1
				if(user['u'] == "id{}".format(member_id)):
					break
			rating_text = "{} –º–µ—Å—Ç–æ".format(position)
			
			basic_info = "\nüìß–°–æ–æ–±—â–µ–Ω–∏–π: {msg_count}\n&#12288;üìù–ü–æ–¥—Ä—è–¥: {msg_count_in_succession}\nüîç–°–∏–º–≤–æ–ª–æ–≤: {simbol_count}\nüìü–ì–æ–ª. —Å–æ–æ–±—â–µ–Ω–∏–π: {audio_msg_count}"
			attachment_info = "\n\nüì∑–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photo_count}\nüìπ–í–∏–¥–µ–æ: {video_count}\nüéß–ê—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π: {audio_count}\nü§°–°—Ç–∏–∫–µ—Ä–æ–≤: {sticker_count}"
			cmd_info = "\n\nüõ†–ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {command_used_count}\nüîò–ù–∞–∂–∞—Ç–æ –∫–Ω–æ–ø–æ–∫: {button_pressed_count}"
			rating_info = "\n\nüëë–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {rating_text}"
			
			info = pre_msg + basic_info + attachment_info + cmd_info + rating_info
			info = info.format(msg_count=stats['msg_count'], msg_count_in_succession=stats['msg_count_in_succession'], 
								simbol_count=stats['simbol_count'], audio_msg_count=stats['audio_msg_count'],
								photo_count=stats['photo_count'], video_count=stats['video_count'],
								audio_count=stats['audio_count'], sticker_count=stats['sticker_count'],
								command_used_count=stats['command_used_count'], button_pressed_count=stats['button_pressed_count'],
								rating_text=rating_text)

			StatsMessageCommand.print_info(output, info, event.bunch.object.from_id, member_id, False)
			return True
		else:
			StatsMessageCommand.print_error_unknow_subcommand(output, event.bunch.object.from_id)
			return False
	
	@staticmethod
	def print_info(output: ChatOutput, info: str, from_id: int, member_id: int, daily: bool):
		if(daily):
			keyboard = keyboard_inline([[callback_button('–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∞', ['run', '!—Å—Ç–∞—Ç–∞ "" {}'.format(member_id), from_id], 'primary')]])
		else:
			keyboard = keyboard_inline([[callback_button('–î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∞', ['run', '!—Å—Ç–∞—Ç–∞ –¥–Ω—è {}'.format(member_id), from_id], 'primary')]])

		message = ChatOutput.UOSMessage(output)
		message.message_new(message=info, keyboard=keyboard)
		message.message_event(message=info, keyboard=keyboard)
		message()

	@staticmethod
	def print_error_unknow_subcommand(output: ChatOutput, user_id: int):
		keyboard = keyboard_inline([
			[callback_button('–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∞', ['run', '!—Å—Ç–∞—Ç–∞', user_id], 'primary')],
			[callback_button('–î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∞', ['run', '!—Å—Ç–∞—Ç–∞ –¥–Ω—è', user_id], 'secondary')]
		])

		message = ChatOutput.UOSMessage(output)
		message.message_new(message='‚õî–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n‚Ä¢ !—Å—Ç–∞—Ç–∞\n‚Ä¢ !c—Ç–∞—Ç–∞ –¥–Ω—è', keyboard=keyboard)
		message.message_event(message='‚õî–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.', keyboard=keyboard)
		message()

	@staticmethod
	def print_error_invalid_userid(output: ChatOutput):
		notice = ChatOutput.UOSNotice(output)
		notice.message_new(message='‚õî–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
		notice.message_event(text='‚õî –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
		notice()

# –ö–æ–º–∞–Ω–¥–∞ !cmdlist
class ShowCommandListMessageCommand:
	@staticmethod
	def main(callin: ChatEventManager.CallbackInputObject):
		event = callin.event
		args = callin.args
		db = callin.db
		output = callin.output
		manager = callin.manager

		builder = PageBuilder(list(manager.message_command_list.keys()), 10)
		number = args.int(1, 1)

		try:
			page = builder(number)
			text = '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ [{}/{}]:'.format(number, builder.max_number)
			for i in page:
				text += "\n‚Ä¢ " + i
			ShowCommandListMessageCommand.print_text(output, text, event.bunch.object.from_id, number, builder.max_number)
		except PageBuilder.PageNumberException:
			ShowCommandListMessageCommand.print_error_out_of_range(output)

	@staticmethod
	def print_text(output: ChatOutput, text: str, from_id: int, number: int, max_number: int):
		message = ChatOutput.UOSMessage(output)
		buttons = []
		if(number > 1):
			prev_number = number - 1
			buttons.append(callback_button("{} ‚¨Ö".format(int2emoji(prev_number)), ['run', '!cmdlist {}'.format(prev_number), from_id], 'secondary'))
		if(number < max_number):
			next_number = number + 1
			buttons.append(callback_button("‚û° {}".format(int2emoji(next_number)), ['run', '!cmdlist {}'.format(next_number), from_id], 'secondary'))
		keyboard = keyboard_inline([buttons, [callback_button('–ó–∞–∫—Ä—ã—Ç—å', ['bot_cancel', from_id], 'negative')]])
		message.message_new(message=VKVariable.Multi('var', 'appeal', 'str', text), keyboard=keyboard)
		message.message_event(message=VKVariable.Multi('var', 'appeal', 'str', text), keyboard=keyboard)
		message()

	@staticmethod
	def print_error_out_of_range(output: ChatOutput):
		notice = ChatOutput.UOSNotice(output)
		notice.message_new(message=VKVariable.Multi('var', 'appeal', 'str', '‚õî–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.'))
		notice.message_event(text='‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.')
		notice()

class CancelCallbackButtonCommand:
	@staticmethod
	def main(callin: ChatEventManager.CallbackInputObject):
		event = callin.event
		payload = callin.payload
		output = callin.output

		testing_user_id = payload.int(1, 0)
		if(testing_user_id == event.bunch.object.user_id or testing_user_id == 0):
			text = payload.str(2, bot.DEFAULT_MESSAGES.MENU_CANCELED)
			output.messages_edit(message=text, peer_id=event.bunch.object.peer_id, conversation_message_id=event.bunch.object.conversation_message_id, keep_forward_messages=True)
		else:
			output.show_snackbar(event.bunch.object.event_id, event.bunch.object.user_id, event.bunch.object.peer_id, bot.DEFAULT_MESSAGES.NO_RIGHTS_TO_USE_THIS_BUTTON)

def message_action_handler(callin: ChatEventManager.CallbackInputObject):
	event = callin.event
	args = callin.args
	db = callin.db
	vk_api = callin.vk_api
	output = callin.output

def error(callin: ChatEventManager.CallbackInputObject):
	raise Exception()

MSG_PHP_COMMANDS = ['!docmd', '!test-template', '!runcb', '!kick-all', '!debug-info', '!db-edit', '!special-permits', '!test-cmd', '!cmd-search', '!test-parser', '!testout', '!cmdlist', '!reg', '!–ø–æ–º–æ—â—å', '!—á–∞—Ç', '!–º–µ–Ω—é', '!–ª–∞–π–∫', '!—É–±—Ä–∞—Ç—å', '!id', '!base64', '!–∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏', '!—Å–æ–æ–±—â–µ–Ω–∏–µ', '!addcustom', '!delcustom', '!customlist', '–ø–æ–∂–∞—Ç—å', '–¥–∞—Ç—å', '!–æ–Ω–ª–∞–π–Ω', '!ban', '!unban', '!baninfo', '!banlist', '!kick', '!–Ω–∏–∫', '!–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', '!modes', '!–ø–∞–Ω–µ–ª—å', '–ø–∞–Ω–µ–ª—å', '!–ø—Ä–∞–≤–∞', '!–Ω–∏–∫–∏', '!—Å—Ç–∞—Ç–∞', '!—Ä–µ–π—Ç–∏–Ω–≥', '!me', '!do', '!try', '!s', '—Å–µ–∫—Å', '–æ–±–Ω—è—Ç—å', '—É–µ–±–∞—Ç—å', '–æ–±–æ—Å—Å–∞—Ç—å', '–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å', '—Ö–∞—Ä–∫–Ω—É—Ç—å', '–æ—Ç—Å–æ—Å–∞—Ç—å', '–æ—Ç–ª–∏–∑–∞—Ç—å', '–ø–æ—Å–ª–∞—Ç—å', '–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å', '–ø–æ—Å–∞–¥–∏—Ç—å', '–ª–∏–∑–Ω—É—Ç—å', '–æ–±–æ—Å—Ä–∞—Ç—å', '–æ–±–ª–µ–≤–∞—Ç—å', '–æ—Ç—à–ª—ë–ø–∞—Ç—å', '–æ—Ç—à–ª–µ–ø–∞—Ç—å', '–ø–æ–∫–∞—à–ª—è—Ç—å', '!–≤—ã–±–µ—Ä–∏', '!—Å–∫–æ–ª—å–∫–æ', '!–∏–Ω—Ñ–∞', '!rndwall', '!memes', '!–±—É—Ç—ã–ª–æ—á–∫–∞', '!tts', '!say', '!–±—Ä–∞–∫', '!–±—Ä–∞–∫–∏', '!shrug', '!tableflip', '!unflip', '!–∫–µ–∫', '!–∫—Ç–æ', '!–∫–æ–≥–æ', '!–∫–æ–º—É', '!—Å—á–µ—Ç', '!—Å—á–µ—Ç', '!—Ä–∞–±–æ—Ç–∞', '!—Ä–∞–±–æ—Ç–∞—Ç—å', '!–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏', '!–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '!–∫—É–ø–∏—Ç—å', '!–ø—Ä–æ–¥–∞—Ç—å', '!–∏–º—É—â–µ—Å—Ç–≤–æ', '!–Ω–∞–≥—Ä–∞–¥—ã', '!–±–∞–Ω–∫', '!–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '!forbes', '!–±–∏–∑–Ω–µ—Å', '!–ø–æ–¥–∞—Ä–∏—Ç—å', '!–∫–∞–∑–∏–Ω–æ', '!—Å—Ç–∞–≤–∫–∞']
CB_PHP_COMMANDS = ['bot_menu', 'bot_cmdlist', 'bot_tictactoe', 'bot_reg', 'bot_listcustomcmd', 'bot_run']
def initcmd_php(manager: ChatEventManager):
	for cmd in MSG_PHP_COMMANDS:
		ignore_db = False
		if cmd in ['!reg']:
			ignore_db = True
		manager.addMessageCommand(cmd, handle_phpcmd, ignore_db=ignore_db)

	for cmd in CB_PHP_COMMANDS:
		ignore_db = False
		if cmd in ['bot_reg']:
			ignore_db = True
		manager.addCallbackButtonCommand(cmd, handle_phpcmd, ignore_db=ignore_db)

	manager.addMessageHandler(handle_phphndl)

def handle_phpcmd(callin: ChatEventManager.CallbackInputObject):
	event = callin.event
	subprocess.Popen(["/usr/bin/php7.0", "radabot-php-core.php", "cmd", json.dumps(event.dict)]).communicate()
	return True

def handle_phphndl(callin: ChatEventManager.CallbackInputObject):
	event = callin.event
	subprocess.Popen(["/usr/bin/php7.0", "radabot-php-core.php", "hndl", json.dumps(event.dict)]).communicate()
	return True

def test(callin: ChatEventManager.CallbackInputObject, s):
	event = callin.event
	args = callin.args
	output = callin.output

	message = ChatOutput.UOSMessage(output)
	message.send(message='–•—É–π '+args.str(1, ''))
	message()

	#result = output.messages_send(peer_id=event.peer_id, message=vk.VKVariable.Multi('str', '–ü—Ä–∏–≤–µ—Ç, ', 'var', 'appeal', 'str', '!'), script='var appeal=\"—Ö—É–π\";')

def test2(callin: ChatEventManager.CallbackInputObject):
	event = callin.event
	args = callin.args
	db = callin.db
	vk_api = callin.vk_api

	vk_api.call('messages.send', {'peer_id': event.bunch.object.peer_id, 'message': bot.check_chat_in_db(db, int(args[1]))})