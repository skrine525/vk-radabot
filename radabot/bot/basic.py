from email import message
import subprocess, json, time
import radabot.core.bot as bot
from radabot.core.io import AdvancedOutputSystem, ChatEventManager, OutputSystem
from radabot.core.system import ChatDatabase, PHPCommandIntegration, PageBuilder, ValueExtractor, Config, int2emoji
from radabot.core.vk import KeyboardBuilder, VKVariable
from radabot.core.bot import DEFAULT_MESSAGES

def initcmd(manager: ChatEventManager):
	manager.add_message_command('!cmdlist', ShowCommandListCommand.message_command)
	manager.add_message_command('!—Å—Ç–∞—Ç–∞', StatsCommand.message_command)
	manager.add_message_command('!—á–∏—Ç', CheatMenuCommand.message_command)

	manager.add_callback_button_command('bot_cancel', CancelCallbackButtonCommand.callback_button_command)
	manager.add_callback_button_command('bot_cmdlist', ShowCommandListCommand.callback_button_command)
	manager.add_callback_button_command('bot_stats', StatsCommand.callback_button_command)
	manager.add_callback_button_command('bot_cheat', CheatMenuCommand.callback_button_command)

# –ö–æ–º–∞–Ω–¥–∞ !—Å—Ç–∞—Ç–∞
class StatsCommand:
	@staticmethod
	def message_command(callin: ChatEventManager.CallbackInputObject):
		event = callin.event
		args = callin.args
		db = callin.db
		output = callin.output

		aos = AdvancedOutputSystem(output, event, db)

		member_id = args.get_int(2, 0)
		if member_id <= 0:
			member_id = event.event_object.from_id
		if 'fwd_messages' in event.event_object:
			try:
				member_id = event.event_object.fwd_messages[0].from_id
			except IndexError:
				pass

		if(member_id <= 0):
			aos.messages_send(message=VKVariable.Multi('var', 'appeal', 'str', '‚õî–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'))
			return False

		subcommand = args.get_str(1, '').lower()
		if(subcommand == '–¥–Ω—è'):
			keyboard = KeyboardBuilder(KeyboardBuilder.INLINE_TYPE)
			if(member_id == event.event_object.from_id):
				pre_msg = "C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è:"
				keyboard.callback_button('–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∞', ['bot_stats', event.event_object.from_id, 1], KeyboardBuilder.PRIMARY_COLOR)
			else:
				pre_msg = "–°—Ç–∞—Å—Ç–∏–∫–∞ –¥–Ω—è @id{} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):".format(member_id)
				keyboard.callback_button('–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∞', ['bot_stats', event.event_object.from_id, 1, member_id], KeyboardBuilder.PRIMARY_COLOR)
			keyboard.new_line()
			keyboard.callback_button('–ó–∞–∫—Ä—ã—Ç—å', ['bot_cancel', event.event_object.from_id], KeyboardBuilder.NEGATIVE_COLOR)
			keyboard = keyboard.build()

			info = StatsCommand.__get_user_text_of_user_stats(db, member_id, True)
			message_text = pre_msg + info
			aos.messages_send(message=VKVariable.Multi('var', 'appeal', 'str', message_text), keyboard=keyboard)

			return True
		elif(subcommand == ''):
			keyboard = KeyboardBuilder(KeyboardBuilder.INLINE_TYPE)
			if(member_id == event.event_object.from_id):
				pre_msg = "C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
				keyboard.callback_button('–î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∞', ['bot_stats', event.event_object.from_id, 2], KeyboardBuilder.PRIMARY_COLOR)
			else:
				pre_msg = "–°—Ç–∞—Å—Ç–∏–∫–∞ @id{} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):".format(member_id)
				keyboard.callback_button('–î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∞', ['bot_stats', event.event_object.from_id, 2, member_id], KeyboardBuilder.PRIMARY_COLOR)

			keyboard.new_line()
			keyboard.callback_button('–ó–∞–∫—Ä—ã—Ç—å', ['bot_cancel', event.event_object.from_id], KeyboardBuilder.NEGATIVE_COLOR)
			keyboard = keyboard.build()

			info = StatsCommand.__get_user_text_of_user_stats(db, member_id, False)
			message_text = pre_msg + info
			aos.messages_send(message=VKVariable.Multi('var', 'appeal', 'str', message_text), keyboard=keyboard)

			return True
		else:
			keyboard = KeyboardBuilder(KeyboardBuilder.INLINE_TYPE)
			keyboard.callback_button('–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∞', ['bot_stats', event.event_object.from_id, 1], KeyboardBuilder.PRIMARY_COLOR)
			keyboard.callback_button('–î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∞', ['bot_stats', event.event_object.from_id, 2], KeyboardBuilder.SECONDARY_COLOR)
			keyboard.new_line()
			keyboard.callback_button('–ó–∞–∫—Ä—ã—Ç—å', ['bot_cancel', event.event_object.from_id], KeyboardBuilder.NEGATIVE_COLOR)
			keyboard = keyboard.build()

			message_text = '‚õî–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n‚Ä¢ !—Å—Ç–∞—Ç–∞\n‚Ä¢ !c—Ç–∞—Ç–∞ –¥–Ω—è'
			aos.messages_send(message=VKVariable.Multi('var', 'appeal', 'str', message_text), keyboard=keyboard)
			return False

	@staticmethod
	def callback_button_command(callin: ChatEventManager.CallbackInputObject):
		event = callin.event
		payload = callin.payload
		output = callin.output
		db = callin.db

		aos = AdvancedOutputSystem(output, event, db)

		testing_user_id = payload.get_int(1, event.event_object.user_id)
		if testing_user_id != event.event_object.user_id:
			aos.show_snackbar(text=DEFAULT_MESSAGES.SNACKBAR_NO_RIGHTS_TO_USE_THIS_BUTTON)
			return

		subcommand = payload.get_int(2, 1)
		member_id = payload.get_int(3, event.event_object.user_id)

		if member_id <= 0:
			aos.messages_send(message=VKVariable.Multi('var', 'appeal', 'str', '‚õî–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'))
			return

		if subcommand == 2:
			keyboard = KeyboardBuilder(KeyboardBuilder.INLINE_TYPE)
			if(member_id == event.event_object.user_id):
				pre_msg = "C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è:"
				keyboard.callback_button('–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∞', ['bot_stats', event.event_object.user_id, 1], KeyboardBuilder.PRIMARY_COLOR)
			else:
				pre_msg = "–°—Ç–∞—Å—Ç–∏–∫–∞ –¥–Ω—è @id{} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):".format(member_id)
				keyboard.callback_button('–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∞', ['bot_stats', event.event_object.user_id, 1, member_id], KeyboardBuilder.PRIMARY_COLOR)
			keyboard.new_line()
			keyboard.callback_button('–ó–∞–∫—Ä—ã—Ç—å', ['bot_cancel', event.event_object.user_id], KeyboardBuilder.NEGATIVE_COLOR)
			keyboard = keyboard.build()

			info = StatsCommand.__get_user_text_of_user_stats(db, member_id, True)
			message_text = pre_msg + info
			aos.messages_edit(message=VKVariable.Multi('var', 'appeal', 'str', message_text), keyboard=keyboard)

			return True
		elif subcommand == 1:
			keyboard = KeyboardBuilder(KeyboardBuilder.INLINE_TYPE)
			if(member_id == event.event_object.user_id):
				pre_msg = "C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
				keyboard.callback_button('–î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∞', ['bot_stats', event.event_object.user_id, 2], KeyboardBuilder.PRIMARY_COLOR)
			else:
				pre_msg = "–°—Ç–∞—Å—Ç–∏–∫–∞ @id{} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):".format(member_id)
				keyboard.callback_button('–î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∞', ['bot_stats', event.event_object.user_id, 2, member_id], KeyboardBuilder.PRIMARY_COLOR)
			keyboard.new_line()
			keyboard.callback_button('–ó–∞–∫—Ä—ã—Ç—å', ['bot_cancel', event.event_object.user_id], KeyboardBuilder.NEGATIVE_COLOR)
			keyboard = keyboard.build()

			info = StatsCommand.__get_user_text_of_user_stats(db, member_id, False)
			message_text = pre_msg + info
			aos.messages_edit(message=VKVariable.Multi('var', 'appeal', 'str', message_text), keyboard=keyboard)

			return True
		else:
			message_text = '‚õî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.'
			aos.show_snackbar(text=message_text)
			return False

	@staticmethod
	def __get_user_text_of_user_stats(db: ChatDatabase, user_id: int, is_daily: bool):
		if is_daily:
			result = db.find(projection={'_id': 0, 'chat_stats.users_daily': 1})
			extractor = ValueExtractor(result)

			current_time = time.time()											# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
			current_day = int(current_time - (current_time % 86400));			# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã (00:00 GMT)

			all_stats = extractor.get('chat_stats.users_daily.time{}'.format(current_day), {})
			stats = extractor.get('chat_stats.users_daily.time{}.id{}'.format(current_day, user_id).format(user_id), {})
			stats = {**bot.ChatStats.STATS_DEFAULT, **stats}
		else:
			result = db.find(projection={'_id': 0, 'chat_stats.users': 1})
			extractor = ValueExtractor(result)

			all_stats = extractor.get('chat_stats.users', {})
			stats = extractor.get('chat_stats.users.id{}'.format(user_id), {})
			stats = {**bot.ChatStats.STATS_DEFAULT, **stats}

		rating = []
		for k, v in all_stats.items():
			u = {**bot.ChatStats.STATS_DEFAULT, **v}
			rating.append({'u': k, 'v': u['msg_count'] - u['msg_count_in_succession']})
		rating.sort(reverse=True, key=lambda e: e['v'])

		position = 0
		for user in rating:
			position += 1
			if(user['u'] == "id{}".format(user_id)):
				break
		rating_text = "{} –º–µ—Å—Ç–æ".format(position)

		basic_info = "\nüìß–°–æ–æ–±—â–µ–Ω–∏–π: {msg_count}\n&#12288;üìù–ü–æ–¥—Ä—è–¥: {msg_count_in_succession}\nüîç–°–∏–º–≤–æ–ª–æ–≤: {symbol_count}\nüìü–ì–æ–ª. —Å–æ–æ–±—â–µ–Ω–∏–π: {audio_msg_count}"
		attachment_info = "\n\nüì∑–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photo_count}\nüìπ–í–∏–¥–µ–æ: {video_count}\nüéß–ê—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π: {audio_count}\nü§°–°—Ç–∏–∫–µ—Ä–æ–≤: {sticker_count}"
		cmd_info = "\n\nüõ†–ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {command_used_count}\nüîò–ù–∞–∂–∞—Ç–æ –∫–Ω–æ–ø–æ–∫: {button_pressed_count}"
		rating_info = "\n\nüëë–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {rating_text}"

		info = basic_info + attachment_info + cmd_info + rating_info
		info = info.format(msg_count=stats['msg_count'], msg_count_in_succession=stats['msg_count_in_succession'],
							symbol_count=stats['symbol_count'], audio_msg_count=stats['audio_msg_count'],
							photo_count=stats['photo_count'], video_count=stats['video_count'],
							audio_count=stats['audio_count'], sticker_count=stats['sticker_count'],
							command_used_count=stats['command_used_count'], button_pressed_count=stats['button_pressed_count'],
							rating_text=rating_text)
		
		return info

# –ö–æ–º–∞–Ω–¥–∞ !cmdlist
class ShowCommandListCommand:
	@staticmethod
	def message_command(callin: ChatEventManager.CallbackInputObject):
		event = callin.event
		args = callin.args
		output = callin.output
		manager = callin.manager
		db = callin.db

		aos = AdvancedOutputSystem(output, event, db)

		builder = PageBuilder(manager.message_command_list, 10)
		number = args.get_int(1, 1)

		try:
			page = builder(number)
			text = '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ [{}/{}]:'.format(number, builder.max_number)
			for i in page:
				text += "\n‚Ä¢ " + i

			keyboard = KeyboardBuilder(KeyboardBuilder.INLINE_TYPE)
			if number > 1:
				prev_number = number - 1
				keyboard.callback_button("{} ‚¨Ö".format(int2emoji(prev_number)), ['bot_cmdlist', event.event_object.from_id, prev_number], KeyboardBuilder.SECONDARY_COLOR)
			if number < builder.max_number:
				next_number = number + 1
				keyboard.callback_button("‚û° {}".format(int2emoji(next_number)), ['bot_cmdlist', event.event_object.from_id, next_number], KeyboardBuilder.SECONDARY_COLOR)
			keyboard.new_line()
			keyboard.callback_button('–ó–∞–∫—Ä—ã—Ç—å', ['bot_cancel', event.event_object.from_id], KeyboardBuilder.NEGATIVE_COLOR)

			aos.messages_send(message=VKVariable.Multi('var', 'appeal', 'str', text), keyboard=keyboard.build())
		except PageBuilder.PageNumberException:
			aos.messages_send(message=VKVariable.Multi('var', 'appeal', 'str', '‚õî–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.'))

	@staticmethod
	def callback_button_command(callin: ChatEventManager.CallbackInputObject):
		event = callin.event
		payload = callin.payload
		output = callin.output
		manager = callin.manager
		db = callin.db

		aos = AdvancedOutputSystem(output, event, db)
		
		testing_user_id = payload.get_int(1, event.event_object.user_id)
		if testing_user_id != event.event_object.user_id:
			aos.show_snackbar(text=DEFAULT_MESSAGES.SNACKBAR_NO_RIGHTS_TO_USE_THIS_BUTTON)
			return

		builder = PageBuilder(manager.message_command_list, 10)
		number = payload.get_int(2, 1)

		try:
			page = builder(number)
			text = '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ [{}/{}]:'.format(number, builder.max_number)
			for i in page:
				text += "\n‚Ä¢ " + i

			keyboard = KeyboardBuilder(KeyboardBuilder.INLINE_TYPE)
			if number > 1:
				prev_number = number - 1
				keyboard.callback_button("{} ‚¨Ö".format(int2emoji(prev_number)), ['bot_cmdlist', event.event_object.user_id, prev_number], KeyboardBuilder.SECONDARY_COLOR)
			if number < builder.max_number:
				next_number = number + 1
				keyboard.callback_button("‚û° {}".format(int2emoji(next_number)), ['bot_cmdlist', event.event_object.user_id, next_number], KeyboardBuilder.SECONDARY_COLOR)
			keyboard.new_line()
			keyboard.callback_button('–ó–∞–∫—Ä—ã—Ç—å', ['bot_cancel', event.event_object.user_id], KeyboardBuilder.NEGATIVE_COLOR)

			aos.messages_edit(message=VKVariable.Multi('var', 'appeal', 'str', text), keyboard=keyboard.build())
		except PageBuilder.PageNumberException:
			aos.show_snackbar(text="‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é —á–µ—Ä–µ–∑ —Ç–µ–∫—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É
class CancelCallbackButtonCommand:
	@staticmethod
	def callback_button_command(callin: ChatEventManager.CallbackInputObject):
		event = callin.event
		payload = callin.payload
		output = callin.output
		db = callin.db

		aos = AdvancedOutputSystem(output, event, db)

		testing_user_id = payload.get_int(1, 0)
		if testing_user_id == event.event_object.user_id or testing_user_id == 0:
			text = payload.get_str(2, bot.DEFAULT_MESSAGES.MESSAGE_MENU_CANCELED)
			aos.messages_edit(message=text)
		else:
			aos.show_snackbar(text=DEFAULT_MESSAGES.SNACKBAR_NO_RIGHTS_TO_USE_THIS_BUTTON)

class CheatMenuCommand:
	@staticmethod
	def message_command(callin: ChatEventManager.CallbackInputObject):
		event = callin.event
		output = callin.output
		db = callin.db

		aos = AdvancedOutputSystem(output, event, db)

		keyboard = KeyboardBuilder(KeyboardBuilder.INLINE_TYPE)
		keyboard.size(width=3)
		for i in range(1, 10):
			keyboard.callback_button(int2emoji(i), ['bot_cheat', event.event_object.from_id, "", i], KeyboardBuilder.SECONDARY_COLOR)
		keyboard.callback_button(int2emoji(0), ['bot_cheat', event.event_object.from_id, "", 0], KeyboardBuilder.SECONDARY_COLOR)
		keyboard = keyboard.build()

		message_text = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:\n\nüòêüòêüòêüòêüòê"

		aos.messages_send(message=VKVariable.Multi('var', 'appeal', 'str', message_text), keyboard=keyboard)

	@staticmethod
	def callback_button_command(callin: ChatEventManager.CallbackInputObject):
		event = callin.event
		payload = callin.payload
		output = callin.output
		db = callin.db

		aos = AdvancedOutputSystem(output, event, db)

		testing_user_id = payload.get_int(1, event.event_object.user_id)
		if testing_user_id != event.event_object.user_id:
			aos.show_snackbar(text=DEFAULT_MESSAGES.SNACKBAR_NO_RIGHTS_TO_USE_THIS_BUTTON)
			return

		code = payload.get_str(2, "")
		num = payload.get_int(3, -1)

		if 0 <= num and num < 10:
			code += str(num)

			if len(code) >= 5:
				CheatMenuCommand.__check_code(aos, event, db, code)
			else:
				message_text = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:\n\n"
				for i in range(1, 6):
					if len(code) >= i:
						message_text += 'üôÇ'
					else:
						message_text += 'üòê'

				keyboard = KeyboardBuilder(KeyboardBuilder.INLINE_TYPE)
				keyboard.size(width=3)
				for i in range(1, 10):
					keyboard.callback_button(int2emoji(i), ['bot_cheat', event.event_object.user_id, code, i], KeyboardBuilder.SECONDARY_COLOR)
				keyboard.callback_button(int2emoji(0), ['bot_cheat', event.event_object.user_id, code, 0], KeyboardBuilder.SECONDARY_COLOR)
				keyboard = keyboard.build()

				aos.messages_edit(message=VKVariable.Multi('var', 'appeal', 'str', message_text), keyboard=keyboard)
		else:
			aos.show_snackbar(text="ü§® –ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è.")

	@staticmethod
	def __check_code(aos: AdvancedOutputSystem, event: ChatEventManager.EventObject, db: ChatDatabase, code: str):
		if code == '00000':
			# –ö–æ–¥ 00000 - –ö–∏–∫ –∏–∑ –≥—Ä—É–ø–ø—ã
			remove_chat_user_params = {'chat_id': db.chat_id, 'user_id': event.event_object.user_id}
			pscript = 'API.messages.removeChatUser({});'.format(json.dumps(remove_chat_user_params, ensure_ascii=False, separators=(',', ':')))
			message_text = 'üò°–ù–µ —Å—Ç–æ–∏—Ç —à—É—Ç–∏—Ç—å —Å–æ –º–Ω–æ–π!'
			aos.messages_edit(message=VKVariable.Multi('var', 'appeal', 'str', message_text), pscript=pscript)
		else:
			# –ü—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–µ
			message_text = 'üòÆ–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª.'
			aos.messages_edit(message=VKVariable.Multi('var', 'appeal', 'str', message_text))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PHP –∫–æ–º–∞–Ω–¥
def initcmd_php(manager: ChatEventManager):
	for cmd in PHPCommandIntegration.message_commands:
		ignore_db = False
		if cmd in ['!reg']:
			ignore_db = True
		manager.add_message_command(cmd, handle_phpcmd, ignore_db=ignore_db)

	for cmd in PHPCommandIntegration.callback_button_commands:
		ignore_db = False
		if cmd in ['bot_reg']:
			ignore_db = True
		manager.add_callback_button_command(cmd, handle_phpcmd, ignore_db=ignore_db)

	manager.add_message_handler(handle_phphndl)

# –í—ã–ø–æ–ª–µ–Ω–µ–Ω–∏–µ PHP –∫–æ–º–∞–Ω–¥
def handle_phpcmd(callin: ChatEventManager.CallbackInputObject):
	event = callin.event
	subprocess.Popen([Config.get("PHP_COMMAND"), "radabot-php-core.php", "cmd", json.dumps(event.raw)]).communicate()

# –í—ã–ø–æ–ª–µ–Ω–µ–Ω–∏–µ –≤–Ω–µ –∫–æ–º–∞–Ω–¥–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ PHP
def handle_phphndl(callin: ChatEventManager.CallbackInputObject):
	event = callin.event
	subprocess.Popen([Config.get("PHP_COMMAND"), "radabot-php-core.php", "hndl", json.dumps(event.raw)]).communicate()