from radabot.core.io import ChatEventManager, ChatOutput
from radabot.core.manager import UserPermission
from radabot.core.system import ManagerData, SelectedUserParser, ArgumentParser, CommandHelpBuilder
from radabot.core.vk import VKVariable
from radabot.core.bot import DEFAULT_MESSAGES


def initcmd(manager: ChatEventManager):
    manager.add_message_command('!–º–µ—Ç–∫–∏', PermissionCommand.message_command)


# –ö–æ–º–∞–Ω–¥–∞ !–ø—Ä–∞–≤–∞
class PermissionCommand:
    @staticmethod
    def message_command(callin: ChatEventManager.CallbackInputObject):
        event = callin.event
        args = callin.args
        db = callin.db
        output = callin.output

        uos = output.uos(db)
        uos.set_appeal(event.from_id)

        subcommand = args.get_str(1, '').lower()
        if subcommand == '–ø–æ–∫–∞–∑':
            member_parser = SelectedUserParser()
            member_parser.set_fwd_messages(event.fwd_messages)
            member_parser.set_argument_parser(args, 2)
            member_id = member_parser.member_id()

            if member_id == 0:
                permits_text = "–í–∞—à–∏ –º–µ—Ç–∫–∏:"
                no_permits_text = "‚ùó–£ –≤–∞—Å –Ω–µ—Ç –º–µ—Ç–æ–∫."
                member_id = event.from_id
            else:
                permits_text = "–ú–µ—Ç–∫–∏ @id{} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):".format(member_id)
                no_permits_text = "‚ùó–£ @id{} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –Ω–µ—Ç –º–µ—Ç–æ–∫.".format(member_id)

            user_permission = UserPermission(db, member_id)
            permission_list = user_permission.get_all()
            user_permissions_data = ManagerData.get_user_permissions_data()
            true_permission_count = 0
            for k, v in permission_list.items():
                if v:
                    label = user_permissions_data[k]['label']
                    permits_text += "\n‚Ä¢ {}".format(label)
                    true_permission_count += 1

            if true_permission_count > 0:
                message = VKVariable.Multi('var', 'appeal', 'str', permits_text)
                uos.messages_send(message=message)
            else:
                message = VKVariable.Multi('var', 'appeal', 'str', no_permits_text)
                uos.messages_send(message=message)
        elif subcommand == '—É–ø—Ä':
            member_parser = SelectedUserParser()
            member_parser.set_fwd_messages(event.fwd_messages)
            member_parser.set_argument_parser(args, 2)
            member_id = member_parser.member_id()

            from_id_permissions = UserPermission(db, event.from_id)
            if from_id_permissions.get('set_permits'):
                if member_id > 0:
                    permissions_data = ManagerData.get_user_permissions_data()

                    # –ü—Ä–æ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    can_manage_list = []
                    for k, v in from_id_permissions.get_all().items():
                        if not permissions_data[k]['is_special'] and v and (event.from_id == db.owner_id or k != 'set_permits'):
                            can_manage_list.append(k)
                    
                    if args.count > 2:
                        member_permission = UserPermission(db, member_id)

                        if not member_permission.get('set_permits') or (event.from_id == db.owner_id and member_id != db.owner_id):
                            message_text = '–ú–µ—Ç–∫–∏ @id{} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):'.format(member_id)
                            for index in range(2, min(args.count, 12)):
                                permission_name = args.get_str(index, '').lower()
                                try:
                                    permission_state = member_permission.get(permission_name)
                                    permission_label = permissions_data[permission_name]['label']
                                    member_permission.set(permission_name, not permission_state)

                                    if permission_name in can_manage_list:
                                        if permission_state:
                                            message_text += '\n‚õî {}'.format(permission_label)
                                        else:
                                            message_text += '\n‚úÖ {}'.format(permission_label)
                                    else:
                                        message_text += '\nüö´ {}'.format(permission_label)
                                except UserPermission.UnknownPermissionException:
                                    message_text += '\n‚ùì {}'.format(permission_name)

                            message_text += '\n\n–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:\n‚úÖ - –ú–µ—Ç–∫–∞ –≤—ã–¥–∞–Ω–∞\n‚õî - –ú–µ—Ç–∫–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞\nüö´ - –ó–∞–ø—Ä–µ—â–µ–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å\n‚ùì - –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–µ—Ç–∫–∞'

                            member_permission.commit()
                            message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                            uos.messages_send(message=message)
                        else:
                            message_text = '‚õî–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –º–µ—Ç–∫–∞–º–∏ @id{member_id} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).'.format(member_id=member_id)
                            message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                            uos.messages_send(message=message)
                    else:
                        permits_text = "–ü—É—Å—Ç–æ"
                        if len(can_manage_list) > 0:
                            permits_text = ', '.join(can_manage_list)
                        message = VKVariable.Multi('var', 'appeal', 'str', '‚õî–£–∫–∞–∂–∏—Ç–µ –º–µ—Ç–∫–∏ (–Ω–µ –±–æ–ª—å—à–µ 10 —à—Ç—É–∫).\n\n–ú–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å: {}.'.format(permits_text))
                        uos.messages_send(message=message)
                else:
                    PermissionCommand.__print_error_select_user(uos, args)
            else:
                message = VKVariable.Multi('var', 'appeal', 'str', DEFAULT_MESSAGES.MESSAGE_YOU_HAVE_NO_RIGHTS)
                uos.messages_send(message=message)
        elif subcommand == '–∏–Ω—Ñ–∞':
            permissions_data = ManagerData.get_user_permissions_data()
            permission_name = args.get_str(2, '').lower()

            if permission_name == '':
                message_text = '–°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–∫:'
                for i in permissions_data:
                    message_text += '\n‚Ä¢ ' + i
                message_text += "\n\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n‚û°Ô∏è !–º–µ—Ç–∫–∏ –∏–Ω—Ñ–∞ [–º–µ—Ç–∫–∞]"
                message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                uos.messages_send(message=message)
            else:
                try:
                    permission_data = permissions_data[permission_name]
                    message = VKVariable.Multi('var', 'appeal', 'str', permission_data['label'])
                    uos.messages_send(message=message)
                except KeyError:
                    permits_text = '\n\n–°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–∫:'
                    for i in permissions_data:
                        permits_text += '\n‚Ä¢ ' + i
                    hint = '\n\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n‚û°Ô∏è !–º–µ—Ç–∫–∏ –∏–Ω—Ñ–∞ [–º–µ—Ç–∫–∞]'
                    message = VKVariable.Multi('var', 'appeal', 'str', "‚õî–ú–µ—Ç–∫–∞ '{}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.{}{}".format(permission_name, permits_text, hint))
                    uos.messages_send(message=message)
        else:
            PermissionCommand.__print_error_unknown_subcommand(uos, args)

    @staticmethod
    def __print_error_select_user(uos: ChatOutput.UOS, args: ArgumentParser):
        first_permission = list(ManagerData.get_user_permissions_data())[0]
        help_builder = CommandHelpBuilder('‚õî–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
        help_builder.command('{} {} [id] [–Ω–∞–∑–≤–∞–Ω–∏–µ]', args.get_str(0).lower(), args.get_str(1).lower())
        help_builder.command('{} {} [–ø–µ—Ä–µ—Å–ª. —Å–æ–æ–±—â–µ–Ω–∏–µ] [–Ω–∞–∑–≤–∞–Ω–∏–µ]', args.get_str(0).lower(), args.get_str(1).lower())
        help_builder.command('{} {} [—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ] [–Ω–∞–∑–≤–∞–Ω–∏–µ]', args.get_str(0).lower(), args.get_str(1).lower())
        help_builder.example('{} {} @durov {}', args.get_str(0).lower(), args.get_str(1).lower(), first_permission)

        message = VKVariable.Multi('var', 'appeal', 'str', help_builder.build())
        uos.messages_send(message=message)

    @staticmethod
    def __print_error_unknown_subcommand(uos: ChatOutput.UOS, args: ArgumentParser):
        help_builder = CommandHelpBuilder('‚õî–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–±–∫–æ–º–∞–Ω–¥–∞.')
        help_builder.command('{} –ø–æ–∫–∞–∑', args.get_str(0).lower())
        help_builder.command('{} –∏–Ω—Ñ–∞', args.get_str(0).lower())
        help_builder.command('{} —É–ø—Ä', args.get_str(0).lower())

        message = VKVariable.Multi('var', 'appeal', 'str', help_builder.build())
        uos.messages_send(message=message)
