from radabot.core.io import ChatEventManager, ChatOutput
from radabot.core.manager import UserPermissions
from radabot.core.system import ManagerData, PageBuilder, SelectedUserParser, ArgumentParser, CommandHelpBuilder, int2emoji
from radabot.core.vk import KeyboardBuilder, VKVariable
from radabot.core.bot import DEFAULT_MESSAGES


def initcmd(manager: ChatEventManager):
    manager.add_message_command('!–º–µ—Ç–∫–∏', PermissionCommand.message_command)

    manager.add_callback_button_command('manager_permits', PermissionCommand.callback_button_command)


# –ö–æ–º–∞–Ω–¥–∞ !–ø—Ä–∞–≤–∞
class PermissionCommand:
    @staticmethod
    def message_command(callin: ChatEventManager.CallbackInputObject):
        event = callin.event
        args = callin.args
        db = callin.db
        output = callin.output

        uos = output.uos(db)
        uos.set_appeal(event.from_id)

        permissions_data = ManagerData.get_user_permissions_data()

        subcommand = args.get_str(1, '').lower()
        if subcommand == '–ø–æ–∫–∞–∑':
            member_parser = SelectedUserParser()
            member_parser.set_fwd_messages(event.fwd_messages)
            member_parser.set_argument_parser(args, 2)
            member_id = member_parser.member_id()

            if member_id == 0:
                permits_text = "–í–∞—à–∏ –º–µ—Ç–∫–∏:"
                no_permits_text = "‚ùó–£ –≤–∞—Å –Ω–µ—Ç –º–µ—Ç–æ–∫."
                member_id = event.from_id
            else:
                permits_text = "–ú–µ—Ç–∫–∏ @id{} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):".format(member_id)
                no_permits_text = "‚ùó–£ @id{} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –Ω–µ—Ç –º–µ—Ç–æ–∫.".format(member_id)

            user_permissions = UserPermissions(db, member_id)
            permission_list = user_permissions.get_all()
            true_permission_count = 0
            for k, v in permission_list.items():
                if v:
                    label = permissions_data[k]['label']
                    permits_text += "\n‚Ä¢ {}".format(label)
                    true_permission_count += 1

            if true_permission_count > 0:
                message = VKVariable.Multi('var', 'appeal', 'str', permits_text)
                uos.messages_send(message=message)
            else:
                message = VKVariable.Multi('var', 'appeal', 'str', no_permits_text)
                uos.messages_send(message=message)
        elif subcommand == '—É–ø—Ä':
            member_parser = SelectedUserParser()
            member_parser.set_fwd_messages(event.fwd_messages)
            member_parser.set_argument_parser(args, 2)
            member_id = member_parser.member_id()

            user_permissions = UserPermissions(db, event.from_id)
            if user_permissions.get('set_permits'):
                if member_id > 0:
                    # –ü—Ä–æ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    can_manage_list = []
                    for k, v in user_permissions.get_all().items():
                        if not permissions_data[k]['is_special'] and v:
                            can_manage_list.append(k)
                    # –£–¥–∞–ª—è–µ–º set_permits –∏–∑ —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –º–µ—Ç–æ–∫, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
                    if event.from_id != db.owner_id:
                        can_manage_list.remove('set_permits')

                        if len(can_manage_list) == 0:
                            message_text = '‚õî–£ –≤–∞—Å –Ω–µ—Ç –º–µ—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å.'
                            message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                            uos.messages_send(message=message)
                            return
                        elif member_id == event.from_id:
                            message_text = '‚õî–ù–µ–ª—å–∑—è —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –º–µ—Ç–∫–∞–º–∏.'
                            message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                            uos.messages_send(message=message)
                            return
                        elif member_id == db.owner_id:
                            message_text = '‚õî–ù–µ–ª—å–∑—è —É–ø—Ä–∞–≤–ª—è—Ç—å –º–µ—Ç–∫–∞–º–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–µ—Å–µ–¥—ã.'
                            message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                            uos.messages_send(message=message)
                            return
                    
                    if args.count > 2:
                        member_permissions = UserPermissions(db, member_id)

                        message_text = '–ú–µ—Ç–∫–∏ @id{} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):'.format(member_id)
                        for index in range(2, min(args.count, 12)):
                            permission_name = args.get_str(index, '').lower()
                            try:
                                permission_state = member_permissions.get(permission_name)
                                permission_label = permissions_data[permission_name]['label']
                                member_permissions.set(permission_name, not permission_state)

                                if permission_name in can_manage_list:
                                    if permission_state:
                                        message_text += '\n‚õî {}'.format(permission_label)
                                    else:
                                        message_text += '\n‚úÖ {}'.format(permission_label)
                                else:
                                    message_text += '\nüö´ {}'.format(permission_label)
                            except UserPermissions.UnknownPermissionException:
                                message_text += '\n‚ùì {}'.format(permission_name)

                        message_text += '\n\n–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:\n‚úÖ - –ú–µ—Ç–∫–∞ –≤—ã–¥–∞–Ω–∞\n‚õî - –ú–µ—Ç–∫–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞\nüö´ - –ó–∞–ø—Ä–µ—â–µ–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å\n‚ùì - –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–µ—Ç–∫–∞'

                        member_permissions.commit()
                        message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                        uos.messages_send(message=message)
                    else:
                        permits_text = "–ü—É—Å—Ç–æ"
                        if len(can_manage_list) > 0:
                            permits_text = ', '.join(can_manage_list)
                        message = VKVariable.Multi('var', 'appeal', 'str', '‚õî–£–∫–∞–∂–∏—Ç–µ –º–µ—Ç–∫–∏ (–Ω–µ –±–æ–ª—å—à–µ 10 —à—Ç—É–∫).\n\n–ú–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å: {}.'.format(permits_text))
                        keyboard = KeyboardBuilder(KeyboardBuilder.INLINE_TYPE)
                        keyboard.callback_button('–£–ø—Ä–∞–≤–ª—è—Ç—å –º–µ—Ç–∫–∞–º–∏', ['manager_permits', event.from_id, 1, member_id], KeyboardBuilder.PRIMARY_COLOR)
                        uos.messages_send(message=message, keyboard=keyboard.build())
                else:
                    PermissionCommand.__print_error_select_user(uos, args)
            else:
                message = VKVariable.Multi('var', 'appeal', 'str', DEFAULT_MESSAGES.MESSAGE_YOU_HAVE_NO_RIGHTS)
                uos.messages_send(message=message)
        elif subcommand == '–∏–Ω—Ñ–∞':
            permission_name = args.get_str(2, '').lower()

            if permission_name == '':
                message_text = '–°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–∫:'
                for i in permissions_data:
                    message_text += '\n‚Ä¢ ' + i
                message_text += "\n\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n‚û°Ô∏è !–º–µ—Ç–∫–∏ –∏–Ω—Ñ–∞ [–º–µ—Ç–∫–∞]"

                keyboard = KeyboardBuilder(KeyboardBuilder.INLINE_TYPE)
                keyboard.callback_button('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', ['manager_permits', event.from_id, 2], KeyboardBuilder.PRIMARY_COLOR)

                message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                uos.messages_send(message=message, keyboard=keyboard.build())
            else:
                try:
                    permission_data = permissions_data[permission_name]
                    message_text = "üÜî–ú–µ—Ç–∫–∞: {}\n‚úè–ù–∞–∑–≤–∞–Ω–∏–µ: {}\nüìù–û–ø–∏—Å–∞–Ω–∏–µ: {}.".format(permission_name, permission_data['label'], permission_data['desc'])
                    message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                    uos.messages_send(message=message)
                except KeyError:
                    permits_text = '\n\n–°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–∫:'
                    for i in permissions_data:
                        permits_text += '\n‚Ä¢ ' + i
                    hint = '\n\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n‚û°Ô∏è !–º–µ—Ç–∫–∏ –∏–Ω—Ñ–∞ [–º–µ—Ç–∫–∞]'
                    message = VKVariable.Multi('var', 'appeal', 'str', "‚õî–ú–µ—Ç–∫–∞ '{}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.{}{}".format(permission_name, permits_text, hint))
                    uos.messages_send(message=message)
        else:
            PermissionCommand.__print_error_unknown_subcommand(uos, args)

    @staticmethod
    def callback_button_command(callin: ChatEventManager.CallbackInputObject):
        event = callin.event
        payload = callin.payload
        db = callin.db
        output = callin.output

        uos = output.uos(db)
        uos.set_appeal(event.user_id)

        permissions_data = ManagerData.get_user_permissions_data()

        testing_user_id = payload.get_int(1, event.user_id)
        if testing_user_id != event.user_id:
            uos.show_snackbar(text=DEFAULT_MESSAGES.SNACKBAR_NO_RIGHTS_TO_USE_THIS_BUTTON)
            return

        sub1 = payload.get_int(2, 0)
        if sub1 == 1:
            user_permissions = UserPermissions(db, event.user_id)
            if user_permissions.get('set_permits'):
                member_id = payload.get_int(3, 0)
                if member_id > 0:
                     # –ü—Ä–æ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    can_manage_list = []
                    for k, v in user_permissions.get_all().items():
                        if not permissions_data[k]['is_special'] and v:
                            can_manage_list.append(k)
                    # –£–¥–∞–ª—è–µ–º set_permits –∏–∑ —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –º–µ—Ç–æ–∫, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
                    if event.user_id != db.owner_id:
                        can_manage_list.remove('set_permits')

                    if len(can_manage_list) == 0:
                        uos.show_snackbar(text='‚õî –£ –≤–∞—Å –Ω–µ—Ç –º–µ—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å.')
                        return
                    elif member_id == event.user_id:
                        uos.show_snackbar(text='‚õî –ù–µ–ª—å–∑—è —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –º–µ—Ç–∫–∞–º–∏.')
                        return
                    elif member_id == db.owner_id:
                        uos.show_snackbar(text='‚õî –ù–µ–ª—å–∑—è —É–ø—Ä–∞–≤–ª—è—Ç—å –º–µ—Ç–∫–∞–º–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–µ—Å–µ–¥—ã.')
                        return

                    member_permissions = UserPermissions(db, member_id)
                    page_number = payload.get_int(4, 1)
                    page_builder = PageBuilder(can_manage_list, 9)

                    can_commit = False
                    change_permission_name = payload.get_str(5, '')
                    if change_permission_name != '':
                        if change_permission_name in can_manage_list:
                            try:
                                new_state = not member_permissions.get(change_permission_name)
                                member_permissions.set(change_permission_name, new_state)
                                can_commit = True
                            except UserPermissions.UnknownPermissionException:
                                uos.show_snackbar(text='‚õî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–µ—Ç–∫–∞.')
                                return
                        else:
                            uos.show_snackbar(text='‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ–π –º–µ—Ç–∫–æ–π.')
                            return

                    try:
                        page = page_builder(page_number)

                        message_text = '–ú–µ—Ç–∫–∏ @id{} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):'.format(member_id)
                        keyboard = KeyboardBuilder(KeyboardBuilder.INLINE_TYPE)
                        keyboard.size(3)
                        for i in range(0, len(page)):
                            name = page[i]
                            state = member_permissions.get(name)
                            label = int2emoji(i+1)
                            color = KeyboardBuilder.POSITIVE_COLOR if state else KeyboardBuilder.NEGATIVE_COLOR
                            message_text += "\n{} {}".format(label, permissions_data[name]['label'])
                            keyboard.callback_button(label, ['manager_permits', testing_user_id, 1, member_id, page_number, name], color)
                        keyboard.reset_size(width=True)

                        keyboard.new_line()
                        if page_number > 1:
                            prev_number = page_number - 1
                            keyboard.callback_button("{} ‚¨Ö".format(int2emoji(prev_number)), ['manager_permits', testing_user_id, 1, member_id, prev_number], KeyboardBuilder.SECONDARY_COLOR)
                        if page_number < page_builder.max_number:
                            next_number = page_number + 1
                            keyboard.callback_button("‚û° {}".format(int2emoji(next_number)), ['manager_permits', testing_user_id, 1, member_id, next_number], KeyboardBuilder.SECONDARY_COLOR)
                        
                        keyboard.new_line()
                        keyboard.callback_button('–ó–∞–∫—Ä—ã—Ç—å', ['bot_cancel', testing_user_id], KeyboardBuilder.NEGATIVE_COLOR)

                        message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                        uos.messages_edit(message=message, keyboard=keyboard.build())
                        if can_commit:
                            member_permissions.commit()
                    except PageBuilder.PageNumberException:
                        uos.show_snackbar(text='‚õî –û—à–∏–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å–ø–∏—Å–∫–∞.')
                else:
                    uos.show_snackbar(text='‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
            else:
                uos.show_snackbar(text=DEFAULT_MESSAGES.SNACKBAR_YOU_HAVE_NO_RIGHTS)
        elif sub1 == 2:
            page_number = payload.get_int(3, 1)
            permission_name = payload.get_str(4, '')
            if permission_name == '':
                page_builder = PageBuilder(list(permissions_data), 9)
                try:
                    page = page_builder(page_number)

                    message_text = '–°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–∫:'
                    keyboard = KeyboardBuilder(KeyboardBuilder.INLINE_TYPE)
                    keyboard.size(3)
                    for i in range(0, len(page)):
                        name = page[i]
                        label = int2emoji(i+1)
                        message_text += '\n{} {}'.format(label, permissions_data[name]['label'])
                        keyboard.callback_button(label, ['manager_permits', testing_user_id, 2, page_number, name], KeyboardBuilder.POSITIVE_COLOR)
                    keyboard.reset_size(width=True)

                    keyboard.new_line()
                    if page_number > 1:
                        prev_number = page_number - 1
                        keyboard.callback_button("{} ‚¨Ö".format(int2emoji(prev_number)), ['manager_permits', testing_user_id, 2, prev_number], KeyboardBuilder.SECONDARY_COLOR)
                    if page_number < page_builder.max_number:
                        next_number = page_number + 1
                        keyboard.callback_button("‚û° {}".format(int2emoji(next_number)), ['manager_permits', testing_user_id, 2, next_number], KeyboardBuilder.SECONDARY_COLOR)

                    keyboard.new_line()
                    keyboard.callback_button('–ó–∞–∫—Ä—ã—Ç—å', ['bot_cancel', testing_user_id], KeyboardBuilder.NEGATIVE_COLOR)

                    message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                    uos.messages_edit(message=message, keyboard=keyboard.build())
                except PageBuilder.PageNumberException:
                    uos.show_snackbar(text='‚õî –û—à–∏–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å–ø–∏—Å–∫–∞.')
            else:
                try:
                    permission_data = permissions_data[permission_name]
                    message_text = "üÜî–ú–µ—Ç–∫–∞: {}\n‚úè–ù–∞–∑–≤–∞–Ω–∏–µ: {}\nüìù–û–ø–∏—Å–∞–Ω–∏–µ: {}.".format(permission_name, permission_data['label'], permission_data['desc'])
                    keyboard = KeyboardBuilder(KeyboardBuilder.INLINE_TYPE)
                    keyboard.callback_button('‚¨Ö –ù–∞–∑–∞–¥', ['manager_permits', testing_user_id, 2, page_number], KeyboardBuilder.PRIMARY_COLOR)
                    keyboard.new_line()
                    keyboard.callback_button('–ó–∞–∫—Ä—ã—Ç—å', ['bot_cancel', testing_user_id], KeyboardBuilder.NEGATIVE_COLOR)
                    message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                    uos.messages_edit(message=message, keyboard=keyboard.build())
                except KeyError:
                    uos.show_snackbar(text='‚õî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–µ—Ç–∫–∞.')
        else:
            uos.show_snackbar(text=DEFAULT_MESSAGES.SNACKBAR_INTERNAL_ERROR)

    @staticmethod
    def __print_error_select_user(uos: ChatOutput.UOS, args: ArgumentParser):
        first_permission = list(ManagerData.get_user_permissions_data())[0]
        help_builder = CommandHelpBuilder('‚õî–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
        help_builder.command('{} {} [id] [–Ω–∞–∑–≤–∞–Ω–∏–µ]', args.get_str(0).lower(), args.get_str(1).lower())
        help_builder.command('{} {} [–ø–µ—Ä–µ—Å–ª. —Å–æ–æ–±—â–µ–Ω–∏–µ] [–Ω–∞–∑–≤–∞–Ω–∏–µ]', args.get_str(0).lower(), args.get_str(1).lower())
        help_builder.command('{} {} [—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ] [–Ω–∞–∑–≤–∞–Ω–∏–µ]', args.get_str(0).lower(), args.get_str(1).lower())
        help_builder.example('{} {} @durov {}', args.get_str(0).lower(), args.get_str(1).lower(), first_permission)

        message = VKVariable.Multi('var', 'appeal', 'str', help_builder.build())
        uos.messages_send(message=message)

    @staticmethod
    def __print_error_unknown_subcommand(uos: ChatOutput.UOS, args: ArgumentParser):
        help_builder = CommandHelpBuilder('‚õî–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–±–∫–æ–º–∞–Ω–¥–∞.')
        help_builder.command('{} –ø–æ–∫–∞–∑', args.get_str(0).lower())
        help_builder.command('{} –∏–Ω—Ñ–∞', args.get_str(0).lower())
        help_builder.command('{} —É–ø—Ä', args.get_str(0).lower())

        message = VKVariable.Multi('var', 'appeal', 'str', help_builder.build())
        uos.messages_send(message=message)
